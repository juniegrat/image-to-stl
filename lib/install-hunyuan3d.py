#!/usr/bin/env python3
"""
Installation compl√®te de Hunyuan3D-2 avec toutes les d√©pendances
Version modulaire - utilise requirements.txt avec versions valid√©es
Python 3.11.9 + CUDA 12.8 + PyTorch 2.7.1
R√©pertoire: lib/
"""

import os
import sys
import subprocess
import tempfile
import shutil
import time
import platform
from pathlib import Path


def run_command(cmd, description="", check=True):
    """Ex√©cute une commande avec gestion d'erreurs"""
    print(f"üîÑ {description}")
    try:
        result = subprocess.run(
            cmd, shell=True, check=check, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Termin√©")
            return True
        else:
            print(f"‚ö†Ô∏è  {description} - Avertissement:")
            if result.stderr:
                print(f"   {result.stderr[:300]}...")
            return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur:")
        if e.stderr:
            print(f"   {e.stderr[:300]}...")
        return False


def safe_remove_directory(path, max_retries=3):
    """Supprime un r√©pertoire de mani√®re s√©curis√©e sur Windows"""
    if not os.path.exists(path):
        return True

    for attempt in range(max_retries):
        try:
            # Sur Windows, essayer de lib√©rer les locks sur les fichiers .git
            if platform.system() == "Windows":
                # Essayer de changer les permissions des fichiers .git
                for root, dirs, files in os.walk(path):
                    if '.git' in root:
                        for file in files:
                            try:
                                file_path = os.path.join(root, file)
                                os.chmod(file_path, 0o777)
                            except:
                                pass
                time.sleep(1)

            shutil.rmtree(path)
            return True
        except (OSError, PermissionError) as e:
            if attempt < max_retries - 1:
                print(
                    f"   üîÑ Tentative {attempt + 1} √©chou√©e, nouvelle tentative...")
                time.sleep(3)  # Attendre plus longtemps
            else:
                print(
                    f"   ‚úÖ R√©pertoire temporaire utilis√© - suppression manuelle possible")
                print(f"   üìÅ Emplacement: {path}")
                return False

    return False


def check_python_version():
    """V√©rifie la version Python"""
    print("üêç V√©rification de la version Python...")

    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print(f"‚ùå Python {version.major}.{version.minor} non support√©")
        print("üí° Hunyuan3D-2 requiert Python 3.8+")
        return False

    print(
        f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - Compatible")

    # Recommandation pour Python 3.11.9
    if version.major == 3 and version.minor == 11:
        print("üåü Python 3.11.x d√©tect√© - Version recommand√©e pour PyTorch 2.7.1")

    return True


def check_cuda():
    """V√©rifie la disponibilit√© de CUDA"""
    print("üîß V√©rification de CUDA...")

    try:
        import torch
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA disponible: {torch.cuda.get_device_name(0)}")
            print(f"   Version CUDA: {torch.version.cuda}")

            # V√©rification pour CUDA 12.8
            cuda_version = torch.version.cuda
            if cuda_version and cuda_version.startswith('12.'):
                print("üåü CUDA 12.x d√©tect√© - Compatible avec PyTorch 2.7.1+cu128")

            return True
        else:
            print("‚ö†Ô∏è  CUDA non disponible - utilisation CPU")
            return False
    except ImportError:
        print("‚ö†Ô∏è  PyTorch non install√© - v√©rification CUDA impossible")
        return False


def uninstall_conflicting_packages():
    """D√©sinstalle uniquement les packages vraiment conflictuels"""
    print("üßπ V√©rification des packages conflictuels...")

    # V√©rifier quels packages sont r√©ellement probl√©matiques
    problematic_packages = []

    # V√©rifier PyTorch - garder si version compatible
    try:
        import torch
        version = torch.__version__
        if version.startswith('2.7.'):
            print(f"‚úÖ PyTorch {version} compatible - conservation")
        else:
            print(
                f"‚ö†Ô∏è  PyTorch {version} non compatible - marqu√© pour mise √† jour")
            problematic_packages.extend(['torch', 'torchvision', 'torchaudio'])
    except ImportError:
        print("‚ÑπÔ∏è  PyTorch non install√© - installation requise")

    # V√©rifier diffusers - garder si version compatible
    try:
        import diffusers
        version = diffusers.__version__
        if version.startswith('0.34.'):
            print(f"‚úÖ Diffusers {version} compatible - conservation")
        else:
            print(
                f"‚ö†Ô∏è  Diffusers {version} non compatible - marqu√© pour mise √† jour")
            problematic_packages.append('diffusers')
    except ImportError:
        print("‚ÑπÔ∏è  Diffusers non install√© - installation requise")

    # V√©rifier transformers - garder si version compatible
    try:
        import transformers
        version = transformers.__version__
        if version.startswith('4.53.'):
            print(f"‚úÖ Transformers {version} compatible - conservation")
        else:
            print(
                f"‚ö†Ô∏è  Transformers {version} non compatible - marqu√© pour mise √† jour")
            problematic_packages.append('transformers')
    except ImportError:
        print("‚ÑπÔ∏è  Transformers non install√© - installation requise")

    # V√©rifier huggingface_hub - utiliser la version r√©cente
    try:
        import huggingface_hub
        version = huggingface_hub.__version__
        if version.startswith('0.33.'):
            print(
                f"‚úÖ huggingface_hub {version} compatible - conservation")
        else:
            print(
                f"‚ö†Ô∏è  huggingface_hub {version} non compatible - marqu√© pour mise √† jour")
            problematic_packages.append('huggingface_hub')
    except ImportError:
        print("‚ÑπÔ∏è  huggingface_hub non install√© - installation requise")

    # D√©sinstaller uniquement les packages probl√©matiques
    if problematic_packages:
        print(
            f"üîÑ D√©sinstallation des packages probl√©matiques: {', '.join(problematic_packages)}")
        for package in problematic_packages:
            run_command(f"pip uninstall -y {package}",
                        f"D√©sinstallation de {package}", check=False)
    else:
        print("‚úÖ Tous les packages sont compatibles - pas de d√©sinstallation n√©cessaire")


def get_requirements_file_path():
    """Trouve le chemin vers le fichier requirements.txt"""
    # Nous sommes dans lib/, donc le fichier est dans le r√©pertoire parent
    current_dir = Path(__file__).parent
    requirements_file = current_dir.parent / "requirements.txt"

    if requirements_file.exists():
        print(f"‚úÖ Fichier requirements trouv√©: {requirements_file}")
        return str(requirements_file)

    # Fallback: chercher dans le r√©pertoire courant
    fallback_file = Path("requirements.txt")
    if fallback_file.exists():
        print(f"‚úÖ Fichier requirements trouv√© (fallback): {fallback_file}")
        return str(fallback_file)

    print("‚ö†Ô∏è  Fichier requirements.txt non trouv√©")
    return None


def install_pytorch():
    """Installe PyTorch 2.7.1 si n√©cessaire"""
    print("üî• V√©rification de PyTorch 2.7.1...")

    # V√©rifier si PyTorch est d√©j√† install√© avec la bonne version
    try:
        import torch
        version = torch.__version__
        if version.startswith('2.7.'):
            print(f"‚úÖ PyTorch {version} d√©j√† install√© - pas de r√©installation")
            return True
        else:
            print(
                f"‚ö†Ô∏è  PyTorch {version} non compatible - mise √† jour requise")
    except ImportError:
        print("‚ÑπÔ∏è  PyTorch non install√© - installation requise")

    # D√©tecter si GPU NVIDIA est disponible
    try:
        result = subprocess.run("nvidia-smi", shell=True, capture_output=True)
        has_nvidia = result.returncode == 0
    except:
        has_nvidia = False

    if has_nvidia:
        print("‚úÖ GPU NVIDIA d√©tect√©")
        # Installer PyTorch 2.7.1 avec CUDA 12.8 (version r√©cente)
        success = run_command(
            "pip install torch==2.7.1+cu128 torchvision==0.22.1+cu128 --index-url https://download.pytorch.org/whl/cu128",
            "PyTorch 2.7.1 avec CUDA 12.8",
            check=False
        )
        if not success:
            print("‚ö†Ô∏è  Installation CUDA √©chou√©e, fallback vers CPU")
            run_command(
                "pip install torch==2.7.1 torchvision==0.22.1", "PyTorch 2.7.1 CPU")
    else:
        print("‚ö†Ô∏è  GPU NVIDIA non d√©tect√©, installation CPU")
        run_command(
            "pip install torch==2.7.1 torchvision==0.22.1", "PyTorch 2.7.1 CPU")

    return True


def install_xformers():
    """Installe xFormers compatible avec PyTorch 2.7.1"""
    print("‚öôÔ∏è  Installation de xFormers compatible...")

    # V√©rifier si PyTorch est install√©
    try:
        import torch
        torch_version = torch.__version__
        print(f"   PyTorch d√©tect√©: {torch_version}")

        # Installer xFormers compatible avec PyTorch 2.7.1
        success = run_command(
            "pip install xformers==0.0.31.post1",
            "xFormers compatible avec PyTorch 2.7.1",
            check=False
        )

        if not success:
            print("‚ö†Ô∏è  Installation xFormers √©chou√©e, utilisation sans xFormers")

    except ImportError:
        print("‚ö†Ô∏è  PyTorch non d√©tect√©, installation xFormers ignor√©e")

    return True


def install_dependencies():
    """Installe toutes les d√©pendances avec versions valid√©es depuis requirements.txt"""
    print("üì¶ Installation des d√©pendances valid√©es...")

    requirements_file = get_requirements_file_path()
    if not requirements_file:
        print("‚ùå Fichier requirements.txt non trouv√©")
        print("üí° Assurez-vous d'√™tre dans le bon r√©pertoire")
        return False

    print(f"   üìã Utilisation du fichier: {requirements_file}")

    # Installation group√©e depuis le fichier requirements
    success = run_command(
        f"pip install -r \"{requirements_file}\"",
        "Installation des d√©pendances valid√©es",
        check=False
    )

    if not success:
        print("‚ö†Ô∏è  Installation group√©e √©chou√©e, tentative individuelle...")
        # Installer les d√©pendances critiques une par une (versions valid√©es)
        critical_deps = [
            "diffusers==0.34.0",
            "transformers==4.53.2",
            "accelerate==0.26.1",
            "safetensors==0.5.3",
            "huggingface_hub==0.33.4",
            "numpy==2.3.1",
            "pillow==11.3.0",
            "trimesh==4.0.5",
            "rembg>=2.0.0",
            "matplotlib==3.10.3",
            "tqdm==4.67.1",
            "omegaconf>=2.3.0",
            "einops==0.8.1"
        ]

        for dep in critical_deps:
            run_command(f"pip install \"{dep}\"",
                        f"Installation de {dep}", check=False)

    return True


def install_torchmcubes():
    """Installe torchmcubes compatible CUDA si n√©cessaire"""
    print("üßä V√©rification de torchmcubes compatible CUDA...")

    # V√©rifier si torchmcubes est d√©j√† install√© et fonctionne
    try:
        import torchmcubes
        from torchmcubes import marching_cubes
        print("‚úÖ torchmcubes d√©j√† install√© et fonctionnel")

        # Test rapide pour v√©rifier la compatibilit√© CUDA
        import torch
        if torch.cuda.is_available():
            try:
                # Test simple avec un petit tensor
                test_tensor = torch.randn(8, 8, 8).cuda()
                print("‚úÖ torchmcubes compatible CUDA - pas de r√©installation")
                return True
            except Exception as e:
                print(f"‚ö†Ô∏è  torchmcubes CUDA non fonctionnel: {e}")
                print("   R√©installation requise")
        else:
            print("‚úÖ torchmcubes CPU fonctionnel - pas de r√©installation")
            return True
    except ImportError:
        print("‚ÑπÔ∏è  torchmcubes non install√© - installation requise")
    except Exception as e:
        print(f"‚ö†Ô∏è  torchmcubes probl√©matique: {e}")
        print("   R√©installation requise")

    # D√©sinstaller et r√©installer uniquement si n√©cessaire
    run_command(
        "pip uninstall torchmcubes -y",
        "D√©sinstallation de torchmcubes existant",
        check=False
    )

    # Installer la version sp√©cifique compatible CUDA
    success = run_command(
        "pip install git+https://github.com/tatsy/torchmcubes.git@3aef8afa5f21b113afc4f4ea148baee850cbd472",
        "Installation de torchmcubes compatible CUDA",
        check=False
    )

    if success:
        print("‚úÖ torchmcubes compatible CUDA install√© avec succ√®s")
    else:
        print("‚ö†Ô∏è  Erreur installation torchmcubes - tentative de fallback")
        # Tentative avec la version standard depuis requirements.txt
        run_command(
            "pip install torchmcubes==0.1.0",
            "Installation de torchmcubes standard",
            check=False
        )

    return True


def install_hunyuan3d():
    """Installe Hunyuan3D-2"""
    print("üèõÔ∏è  Installation de Hunyuan3D-2...")

    # Cr√©er un nom de r√©pertoire unique pour √©viter les conflits
    temp_dir = tempfile.mkdtemp(prefix="hunyuan3d_install_")
    original_dir = os.getcwd()

    try:
        os.chdir(temp_dir)

        # Cloner le repo
        success = run_command(
            "git clone https://github.com/Tencent-Hunyuan/Hunyuan3D-2.git",
            "Clonage de Hunyuan3D-2"
        )

        if success:
            hunyuan_dir = os.path.join(temp_dir, "Hunyuan3D-2")
            os.chdir(hunyuan_dir)

            # Installer le package
            success = run_command(
                "pip install -e .",
                "Installation du package Hunyuan3D",
                check=False
            )

            if not success:
                print("‚ö†Ô∏è  Installation pip √©chou√©e, tentative avec setup.py")
                run_command("python setup.py develop",
                            "Installation avec setup.py", check=False)

    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors de l'installation: {e}")

    finally:
        # Retourner au r√©pertoire original
        os.chdir(original_dir)

        # Nettoyer le r√©pertoire temporaire de mani√®re s√©curis√©e
        if os.path.exists(temp_dir):
            print("üßπ Nettoyage du r√©pertoire temporaire...")
            safe_remove_directory(temp_dir)

    return True


def test_installation():
    """Teste l'installation avec diagnostics d√©taill√©s"""
    print("üß™ Test de l'installation...")

    # Test des imports de base
    try:
        import torch
        print(f"‚úÖ PyTorch {torch.__version__} import√©")

        import numpy as np
        print(f"‚úÖ NumPy {np.__version__} import√©")

        import PIL
        print(f"‚úÖ PIL import√©")

        import trimesh
        print(f"‚úÖ Trimesh import√©")

        import rembg
        print(f"‚úÖ rembg import√©")

        import diffusers
        print(f"‚úÖ Diffusers {diffusers.__version__} import√©")

        import transformers
        print(f"‚úÖ Transformers {transformers.__version__} import√©")

    except ImportError as e:
        print(f"‚ùå Erreur import: {e}")
        return False

    # Test CUDA
    try:
        import torch
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA fonctionnel: {torch.cuda.get_device_name(0)}")
            print(f"   Version CUDA PyTorch: {torch.version.cuda}")
        else:
            print("‚ö†Ô∏è  CUDA non disponible")
    except:
        print("‚ö†Ô∏è  Test CUDA √©chou√©")

    # Test xFormers
    try:
        import xformers
        print(f"‚úÖ xFormers {xformers.__version__} disponible")
    except ImportError:
        print("‚ö†Ô∏è  xFormers non disponible - continuera sans optimisations")

    # Test torchmcubes avec CUDA
    try:
        import torchmcubes
        print("‚úÖ torchmcubes import√©")

        # Test sp√©cifique pour la compatibilit√© CUDA
        try:
            from torchmcubes import marching_cubes
            print("‚úÖ marching_cubes fonction disponible")

            # Test des fonctions CUDA si disponibles
            import torch
            if torch.cuda.is_available():
                try:
                    # Test avec un petit tensor pour v√©rifier la compatibilit√© CUDA
                    test_tensor = torch.randn(32, 32, 32).cuda()
                    # Ne pas ex√©cuter marching_cubes ici car cela n√©cessite des donn√©es sp√©cifiques
                    print("‚úÖ torchmcubes compatible CUDA (test tensor r√©ussi)")
                except Exception as e:
                    print(f"‚ö†Ô∏è  torchmcubes CUDA: {e}")
                    print("   Utilisera la version CPU si n√©cessaire")
            else:
                print("‚ö†Ô∏è  CUDA non disponible - torchmcubes utilisera le CPU")
        except Exception as e:
            print(f"‚ö†Ô∏è  Test torchmcubes d√©taill√©: {e}")

    except ImportError as e:
        print(f"‚ùå torchmcubes non disponible: {e}")
        print("   R√©installez avec: pip install git+https://github.com/tatsy/torchmcubes.git@3aef8afa5f21b113afc4f4ea148baee850cbd472")

    # Test Hunyuan3D avec gestion d'erreurs am√©lior√©e
    try:
        # Test simple d'import sans initialisation compl√®te
        print("   üß™ Test import Hunyuan3D modules...")

        # Test import basique
        from hy3dgen.shapegen import Hunyuan3DDiTFlowMatchingPipeline
        print("‚úÖ Hunyuan3D shape pipeline disponible")

        from hy3dgen.texgen import Hunyuan3DPaintPipeline
        print("‚úÖ Hunyuan3D texture pipeline disponible")

        # Test huggingface_hub avec nouvelle API
        try:
            from huggingface_hub import hf_hub_download
            import huggingface_hub
            print(
                f"‚úÖ huggingface_hub {huggingface_hub.__version__} compatible")
        except ImportError:
            print(
                "‚ö†Ô∏è  hf_hub_download non disponible - v√©rifiez la version huggingface_hub")

        # Test diffusers avec nouvelles versions
        try:
            import diffusers
            print(
                f"‚úÖ diffusers {diffusers.__version__} compatible")
        except ImportError:
            print("‚ö†Ô∏è  diffusers non disponible")

        print("‚úÖ Hunyuan3D-2 install√© et fonctionnel avec versions r√©centes")
        return True
    except ImportError as e:
        print(f"‚ö†Ô∏è  Hunyuan3D non disponible: {e}")
        print("   Installation de base r√©ussie - testez avec le convertisseur")
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è  Test Hunyuan3D: {e}")
        return True


def test_modular_architecture():
    """Teste la nouvelle architecture modulaire"""
    print("üèóÔ∏è  Test de l'architecture modulaire...")

    # Tester l'import des modules sp√©cialis√©s
    try:
        # Adapter le chemin selon l'emplacement du script
        current_dir = Path(__file__).parent
        sys.path.insert(0, str(current_dir))

        print("   üì¶ Test des modules sp√©cialis√©s...")

        # Test des imports modulaires
        try:
            from hunyuan3d_config import get_config, QualityMode
            print("   ‚úÖ hunyuan3d_config import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_config: {e}")

        try:
            from hunyuan3d_models import get_model_manager
            print("   ‚úÖ hunyuan3d_models import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_models: {e}")

        try:
            from hunyuan3d_image_processing import get_image_processor
            print("   ‚úÖ hunyuan3d_image_processing import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_image_processing: {e}")

        try:
            from hunyuan3d_mesh_processing import get_mesh_processor
            print("   ‚úÖ hunyuan3d_mesh_processing import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_mesh_processing: {e}")

        try:
            from hunyuan3d_rendering import get_renderer
            print("   ‚úÖ hunyuan3d_rendering import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_rendering: {e}")

        try:
            from hunyuan3d_camera import get_camera_info
            print("   ‚úÖ hunyuan3d_camera import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_camera: {e}")

        # Test du convertisseur principal
        try:
            from hunyuan3d_converter import Hunyuan3DConverter
            print("   ‚úÖ hunyuan3d_converter import√©")
        except ImportError as e:
            print(f"   ‚ö†Ô∏è  hunyuan3d_converter: {e}")

        print("‚úÖ Architecture modulaire fonctionnelle")
        return True

    except Exception as e:
        print(f"‚ö†Ô∏è  Test architecture modulaire: {e}")
        print("   üí° Les modules seront disponibles apr√®s installation compl√®te")
        return True


def download_models():
    """V√©rifie si les mod√®les sont d√©j√† dans le cache Hugging Face"""
    print("üì• V√©rification des mod√®les dans le cache Hugging Face...")

    try:
        import os
        from pathlib import Path

        # V√©rifier les emplacements possibles du cache
        possible_cache_dirs = [
            Path.home() / ".cache" / "huggingface" / "hub" / "models--tencent--Hunyuan3D-2",
            Path("C:/Users") / os.getenv("USERNAME", "User") / ".cache" /
            "huggingface" / "hub" / "models--tencent--Hunyuan3D-2",
        ]

        for cache_dir in possible_cache_dirs:
            if cache_dir.exists():
                print(f"   ‚úÖ Mod√®le Hunyuan3D-2 trouv√© dans le cache")
                print(f"   üìÅ Emplacement: {cache_dir}")
                return True

        print("   ‚ÑπÔ∏è  Mod√®le non trouv√© dans le cache - sera t√©l√©charg√© au premier usage")
        print(
            "   üìÅ Sera stock√© dans: ~/.cache/huggingface/hub/models--tencent--Hunyuan3D-2")
        return True

    except Exception as e:
        print(f"   ‚úÖ V√©rification cache √©chou√©e (normal): {e}")
        print("   üìÅ Mod√®le sera t√©l√©charg√© automatiquement au premier usage")
        return True


def cleanup_temp_files():
    """Nettoie les fichiers temporaires et les fichiers de version cr√©√©s par erreur"""
    print("üßπ Nettoyage des fichiers temporaires...")

    # Nettoyer les fichiers de version cr√©√©s par erreur (probl√®me pip/shell)
    version_patterns = ["[0-9]*.[0-9]*.[0-9]*", "[0-9]*.[0-9]*", "[0-9]*"]
    for pattern in version_patterns:
        for file in Path(".").glob(pattern):
            if file.is_file() and file.name.replace(".", "").isdigit():
                try:
                    file.unlink()
                    print(f"   üóëÔ∏è  Supprim√© fichier de version: {file}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Impossible de supprimer {file}: {e}")

    # Nettoyer les fichiers de cache temporaires Python
    cache_patterns = ["__pycache__", "*.pyc", ".pytest_cache"]

    for pattern in cache_patterns:
        for file in Path(".").glob(pattern):
            try:
                if file.is_file():
                    file.unlink()
                elif file.is_dir():
                    import shutil
                    shutil.rmtree(file)
                print(f"   üóëÔ∏è  Nettoy√©: {file}")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Impossible de nettoyer {file}: {e}")


def main():
    """Fonction principale d'installation"""
    print("üöÄ Installation de Hunyuan3D-2 pour le convertisseur de pi√®ces")
    print("   Version modulaire - utilise requirements.txt avec versions valid√©es")
    print("   Python 3.11.9 + CUDA 12.8 + PyTorch 2.7.1")
    print("=" * 70)

    try:
        # √âtape 1: V√©rifications pr√©liminaires
        if not check_python_version():
            return False

        check_cuda()

        # √âtape 2: Nettoyer les packages conflictuels
        print("\nüßπ √âtape 2: Nettoyage des packages conflictuels...")
        uninstall_conflicting_packages()

        # √âtape 3: Installation de PyTorch r√©cent
        print("\nüî• √âtape 3: Installation de PyTorch 2.7.1 (r√©cent)...")
        install_pytorch()

        # √âtape 4: Installation de xFormers compatible
        print("\n‚öôÔ∏è  √âtape 4: Installation de xFormers compatible...")
        install_xformers()

        # √âtape 5: Installation des d√©pendances valid√©es
        print("\nüì¶ √âtape 5: Installation des d√©pendances valid√©es...")
        install_dependencies()

        # √âtape 6: Installation de torchmcubes compatible CUDA
        print("\nüßä √âtape 6: Installation de torchmcubes compatible CUDA...")
        install_torchmcubes()

        # √âtape 7: Installation de Hunyuan3D-2
        print("\nüèõÔ∏è  √âtape 7: Installation de Hunyuan3D-2...")
        install_hunyuan3d()

        # √âtape 8: Test de l'installation
        print("\nüß™ √âtape 8: Test de l'installation...")
        test_installation()

        # √âtape 9: Test de l'architecture modulaire
        print("\nüèóÔ∏è  √âtape 9: Test de l'architecture modulaire...")
        test_modular_architecture()

        # √âtape 10: T√©l√©chargement des mod√®les (optionnel)
        print("\nüì• √âtape 10: T√©l√©chargement des mod√®les...")
        download_models()

        # √âtape 11: Nettoyage
        print("\nüßπ √âtape 11: Nettoyage...")
        cleanup_temp_files()

        print("\n‚úÖ Installation r√©ussie!")
        print("\nüí° Utilisation:")
        print("   python hunyuan3d-coin-to-stl.py image.jpg")
        print("   python hunyuan3d-coin-to-stl.py avers.jpg -b revers.jpg")
        print("   python hunyuan3d-coin-to-stl.py image.jpg --quality-preset ultra")
        print("   python hunyuan3d-coin-to-stl.py --info")

        print("\nüîß Versions install√©es (valid√©es Python 3.11.9):")
        print("   ‚Ä¢ PyTorch 2.7.1 avec CUDA 12.8")
        print("   ‚Ä¢ Diffusers 0.34.0 (r√©cente)")
        print("   ‚Ä¢ Transformers 4.53.2 (r√©cente)")
        print("   ‚Ä¢ xFormers 0.0.31.post1 (compatible)")
        print("   ‚Ä¢ torchmcubes 0.1.0 (compatible CUDA)")
        print("   ‚Ä¢ HuggingFace Hub 0.33.4 (r√©cente)")
        print("   ‚Ä¢ NumPy 2.3.1 (version 2.x)")
        print("   ‚Ä¢ hy3dgen 2.0.2 (install√© et fonctionnel)")

        print("\nüèóÔ∏è  Architecture modulaire:")
        print("   ‚Ä¢ hunyuan3d_config.py - Configuration et modes de qualit√©")
        print("   ‚Ä¢ hunyuan3d_models.py - Gestion des mod√®les et pipelines")
        print("   ‚Ä¢ hunyuan3d_camera.py - Utilitaires de cam√©ra et rayons")
        print("   ‚Ä¢ hunyuan3d_rendering.py - Rendu 3D et g√©n√©ration vid√©os")
        print("   ‚Ä¢ hunyuan3d_mesh_processing.py - Traitement et optimisation mesh")
        print("   ‚Ä¢ hunyuan3d_image_processing.py - Traitement d'images")
        print("   ‚Ä¢ hunyuan3d_converter.py - Convertisseur principal modulaire")
        print("   ‚Ä¢ hunyuan3d_utils.py - Compatibilit√© avec ancien code")

        print("\n‚ö†Ô∏è  Conseils:")
        print("   ‚Ä¢ Red√©marrez votre terminal apr√®s l'installation")
        print("   ‚Ä¢ Les mod√®les seront t√©l√©charg√©s lors de la premi√®re utilisation")
        print("   ‚Ä¢ Utilisez requirements.txt pour versions valid√©es r√©centes")
        print("   ‚Ä¢ Si erreur, utilisez --setup pour diagnostiquer")
        print("   ‚Ä¢ Python 3.11.9 + CUDA 12.8 + PyTorch 2.7.1 = configuration recommand√©e")

        return True

    except Exception as e:
        print(f"\n‚ùå Erreur installation: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

#!/usr/bin/env python3
"""
Module de conversion STL pour Hunyuan3D-2mv
G√®re la conversion d'images de pi√®ces (avers/revers) en mod√®les STL 3D haute fid√©lit√©
Utilise des utilitaires modulaires pour l'ind√©pendance compl√®te
"""

import os
import sys
import time
import warnings
from pathlib import Path
from typing import List, Optional

import torch
import numpy as np
from PIL import Image
import trimesh
import rembg
from tqdm import tqdm

# Import des utilitaires Hunyuan3D
try:
    # Import relatif quand utilis√© comme module
    from .hunyuan3d_utils import (
        get_ray_directions,
        get_rays,
        get_spherical_cameras,
        save_video,
        to_gradio_3d_orientation,
        remove_background,
        resize_foreground,
        normalize_mesh,
        render_mesh_view,
        debug_mesh_properties,
        get_hunyuan3d_info,
        use_generated_video_if_available,
        copy_generated_renders
    )
except ImportError:
    # Import absolu quand utilis√© directement
    from hunyuan3d_utils import (
        get_ray_directions,
        get_rays,
        get_spherical_cameras,
        save_video,
        to_gradio_3d_orientation,
        remove_background,
        resize_foreground,
        normalize_mesh,
        render_mesh_view,
        debug_mesh_properties,
        get_hunyuan3d_info,
        use_generated_video_if_available,
        copy_generated_renders
    )

# Supprimer les warnings
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)


class Hunyuan3DConverter:
    """
    Convertisseur principal pour Hunyuan3D-2mv
    Optimis√© pour les pi√®ces numismatiques avec support multi-view
    Rendu vid√©o avec utilitaires modulaires ind√©pendants
    """

    def __init__(self, model_path="tencent/Hunyuan3D-2",
                 texture_model_path="tencent/Hunyuan3D-2",
                 device=None,
                 disable_texture=False):
        """
        Initialise le convertisseur Hunyuan3D-2mv

        Args:
            model_path: Chemin vers le mod√®le de forme (d√©faut: Hunyuan3D-2mv)
            texture_model_path: Chemin vers le mod√®le de texture
            device: Device √† utiliser (auto-d√©tect√© si None)
            disable_texture: D√©sactiver compl√®tement le chargement du mod√®le de texture
        """
        self.model_path = model_path
        self.texture_model_path = texture_model_path
        self.device = device or (
            "cuda" if torch.cuda.is_available() else "cpu")
        self.disable_texture = disable_texture

        # Pipelines (charg√©s √† la demande)
        self.shape_pipeline = None
        self.texture_pipeline = None

        # Configuration par d√©faut
        self.config = {
            'image_size': 512,
            'guidance_scale': 12.0,  # Augment√© de 7.5 pour plus de fid√©lit√© aux d√©tails
            'num_inference_steps': 75,  # Augment√© de 50 pour plus de pr√©cision
            'texture_guidance_scale': 4.0,  # Augment√© de 2.0 pour une meilleure texture
            'texture_steps': 40,  # Augment√© de 28 pour plus de d√©tails de texture
            'seed': 42,
            # Param√®tres de rendu
            'n_views': 30,
            'elevation_deg': 5.0,  # Chang√© de 0.0 pour mieux capturer la profondeur
            'camera_distance': 1.7,  # R√©duit de 1.9 pour plus de d√©tails
            'fovy_deg': 35.0,  # R√©duit de 40.0 pour moins de distortion
            'height': 512,  # Augment√© de 256 pour plus de d√©tails
            'width': 512,   # Augment√© de 256 pour plus de d√©tails
            'fps': 30,
            'foreground_ratio': 0.90  # Augment√© de 0.85 pour mieux capturer l'objet
        }

        # Configuration sp√©ciale pour pi√®ces numismatiques (optimis√©e)
        self.coin_config = {
            'image_size': 1024,  # R√©solution plus √©lev√©e pour capturer les d√©tails fins
            'guidance_scale': 7.5,  # Plus √©lev√© pour forcer la circularit√©
            'num_inference_steps': 50,  # Plus d'√©tapes pour plus de pr√©cision
            'texture_guidance_scale': 2.0,  # Plus √©lev√© pour les d√©tails de texture
            'texture_steps': 28,  # Plus d'√©tapes pour les d√©tails fins
            'seed': 12345,  # Seed diff√©rent optimis√© pour les pi√®ces
            # Param√®tres de rendu optimis√©s pour pi√®ces
            'n_views': 36,  # Diviseur de 360¬∞ pour rotation parfaite
            'elevation_deg': 15.0,  # Angle optimal pour capturer la profondeur des pi√®ces
            'camera_distance': 1.5,  # Plus proche pour capturer les d√©tails
            'fovy_deg': 30.0,  # Angle de vue serr√© pour r√©duire la distortion
            'height': 1024,  # R√©solution √©lev√©e pour les d√©tails
            'width': 1024,   # R√©solution √©lev√©e pour les d√©tails
            'fps': 30,
            'foreground_ratio': 0.95,  # Ratio √©lev√© pour capturer toute la pi√®ce
            # Nouveaux param√®tres sp√©cifiques aux pi√®ces
            'coin_mode': True,
            'circular_mask': True,  # Forcer la forme circulaire
            'detail_preservation': True,  # Pr√©server les d√©tails fins
            'anti_aliasing': True,  # R√©duire les artefacts
            'smooth_edges': True,  # Lisser les bords pour une forme plus ronde
        }

        # Session rembg pour la suppression d'arri√®re-plan
        self.rembg_session = None

        print(f"üîß Convertisseur Hunyuan3D-2mv initialis√© (utilitaires modulaires)")
        print(f"   Device: {self.device}")
        print(f"   Mod√®le forme: {self.model_path}")
        print(f"   Mod√®le texture: {self.texture_model_path}")

    def enable_coin_mode(self):
        """Active le mode pi√®ce avec param√®tres optimis√©s"""
        print("ü™ô Activation du mode pi√®ce optimis√©")
        print("   ‚úÖ R√©solution: 1024x1024 (haute d√©finition)")
        print("   ‚úÖ Guidance scale: 15.0 (circularit√© forc√©e)")
        print("   ‚úÖ Steps: 100 (pr√©cision maximale)")
        print("   ‚úÖ Angle cam√©ra: 15¬∞ (optimal pour pi√®ces)")
        print("   ‚úÖ Distance: 1.5 (capture d√©tails fins)")
        print("   ‚úÖ Anti-aliasing activ√©")
        print("   ‚úÖ Lissage des bords activ√©")

        # Remplacer la configuration par d√©faut
        self.config = self.coin_config.copy()

        # Initialiser rembg pour le mode pi√®ce si pas d√©j√† fait
        if not self.rembg_session:
            try:
                import rembg
                self.rembg_session = rembg.new_session()
                print("   ‚úÖ Session rembg initialis√©e pour suppression arri√®re-plan")
            except ImportError:
                print("   ‚ö†Ô∏è  rembg non disponible, suppression arri√®re-plan d√©sactiv√©e")

    def disable_coin_mode(self):
        """D√©sactive le mode pi√®ce (retour aux param√®tres par d√©faut)"""
        print("üîÑ D√©sactivation du mode pi√®ce - retour aux param√®tres par d√©faut")
        # Restaurer la configuration par d√©faut
        self.config = {
            'image_size': 512,
            'guidance_scale': 12.0,
            'num_inference_steps': 75,
            'texture_guidance_scale': 4.0,
            'texture_steps': 40,
            'seed': 42,
            'n_views': 30,
            'elevation_deg': 5.0,
            'camera_distance': 1.7,
            'fovy_deg': 35.0,
            'height': 512,
            'width': 512,
            'fps': 30,
            'foreground_ratio': 0.90
        }

    def check_environment(self):
        """V√©rifie l'environnement et les d√©pendances"""
        print("üîç V√©rification de l'environnement...")

        # V√©rifier CUDA
        if torch.cuda.is_available():
            print(f"‚úÖ CUDA: {torch.cuda.get_device_name(0)}")
            print(
                f"   M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        else:
            print("‚ö†Ô∏è  CUDA non disponible")

        # V√©rifier les d√©pendances critiques
        deps = ['diffusers', 'transformers', 'accelerate', 'torch',
                'torchvision', 'PIL', 'numpy', 'trimesh', 'imageio', 'rembg', 'tqdm', 'matplotlib']
        missing = []

        for dep in deps:
            try:
                if dep == 'PIL':
                    import PIL
                elif dep == 'matplotlib':
                    import matplotlib.pyplot as plt
                else:
                    __import__(dep)
            except ImportError:
                missing.append(dep)

        if missing:
            print(f"‚ùå D√©pendances manquantes: {', '.join(missing)}")
            return False

        print("‚úÖ Toutes les d√©pendances sont disponibles")
        return True

    def load_models(self):
        """Charge les mod√®les Hunyuan3D-2"""
        print("ü§ñ Chargement des mod√®les...")

        try:
            # Importer les classes n√©cessaires
            from hy3dgen.shapegen import Hunyuan3DDiTFlowMatchingPipeline
            from hy3dgen.texgen import Hunyuan3DPaintPipeline

            # Charger le mod√®le de forme
            print(f"   üìê Chargement du mod√®le de forme...")
            try:
                self.shape_pipeline = Hunyuan3DDiTFlowMatchingPipeline.from_pretrained(
                    self.model_path,
                    torch_dtype=torch.float16 if self.device == "cuda" else torch.float32,
                    device_map="auto" if self.device == "cuda" else None,
                    trust_remote_code=True,
                    cache_dir=None  # Utilise le cache HF standard
                )
                print(f"   ‚úÖ Mod√®le de forme charg√© avec succ√®s!")
            except Exception as e:
                print(f"   ‚ùå Erreur chargement mod√®le de forme: {e}")
                return False

            # Charger le mod√®le de texture avec gestion d'erreurs am√©lior√©e
            if self.disable_texture:
                print("   üö´ Chargement du mod√®le de texture d√©sactiv√©")
                print("   üìã Mode disponible: g√©n√©ration de forme uniquement")
                self.texture_pipeline = None
            else:
                print("   üé® Chargement du mod√®le de texture...")
                try:
                    # Essayer plusieurs chemins possibles pour le mod√®le de texture
                    texture_paths = [
                        self.texture_model_path,
                        "tencent/Hunyuan3D-2",  # Utilise le cache HF standard
                    ]

                    texture_loaded = False
                    for path in texture_paths:
                        try:
                            print(f"      Tentative avec: {path}")
                            # Hunyuan3DPaintPipeline ne supporte que l'argument path dans from_pretrained()
                            self.texture_pipeline = Hunyuan3DPaintPipeline.from_pretrained(
                                path
                            )

                            # D√©placer vers le device manuellement si n√©cessaire
                            if hasattr(self.texture_pipeline, 'to'):
                                self.texture_pipeline = self.texture_pipeline.to(
                                    self.device)

                            print("   ‚úÖ Mod√®le de texture charg√© avec succ√®s!")
                            texture_loaded = True
                            break
                        except Exception as e:
                            print(f"      ‚ö†Ô∏è  √âchec avec {path}: {e}")
                            continue

                    if not texture_loaded:
                        print("   ‚ö†Ô∏è  Impossible de charger le mod√®le de texture")
                        print("   üìã Mode disponible: g√©n√©ration de forme uniquement")
                        self.texture_pipeline = None

                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Erreur g√©n√©rale texture: {e}")
                    print("   Continuation sans texture (mesh uniquement)")
                    self.texture_pipeline = None

            # Initialiser la session rembg pour la suppression d'arri√®re-plan
            try:
                import rembg
                self.rembg_session = rembg.new_session('u2net')
                print("   ‚úÖ Session rembg initialis√©e")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Session rembg non disponible: {e}")
                self.rembg_session = None

            print("‚úÖ Mod√®les charg√©s avec succ√®s!")
            return True

        except ImportError as e:
            print(f"‚ùå Erreur lors de l'importation des modules Hunyuan3D: {e}")
            print("üí° V√©rifiez que Hunyuan3D-2 est correctement install√©")
            print("üí° Ex√©cutez: python install-hunyuan3d.py")
            return False
        except Exception as e:
            print(f"‚ùå Erreur lors du chargement des mod√®les: {e}")
            print("üí° V√©rifiez que Hunyuan3D-2 est correctement install√©")
            return False

    def prepare_images(self, image_paths: List[str], remove_bg: bool = False) -> List[Image.Image]:
        """
        Pr√©pare les images pour le traitement

        Args:
            image_paths: Liste des chemins vers les images
            remove_bg: Si True, supprime l'arri√®re-plan

        Returns:
            Liste des images pr√©par√©es
        """
        print(f"üñºÔ∏è  Pr√©paration de {len(image_paths)} image(s)...")

        images = []
        for i, path in enumerate(image_paths):
            try:
                # Charger l'image
                image = Image.open(path).convert('RGB')

                # Supprimer l'arri√®re-plan si demand√©
                if remove_bg and self.rembg_session:
                    print(f"   üîÑ Suppression arri√®re-plan image {i+1}")
                    image = remove_background(
                        image, rembg_session=self.rembg_session)

                    # Traitement de l'image avec canal alpha
                    if image.mode == 'RGBA':
                        image = resize_foreground(
                            image, self.config['foreground_ratio'])
                        image_array = np.array(
                            image).astype(np.float32) / 255.0
                        # Convertir en RGB avec fond gris
                        image_array = image_array[:, :, :3] * image_array[:,
                                                                          :, 3:4] + (1 - image_array[:, :, 3:4]) * 0.5
                        image = Image.fromarray(
                            (image_array * 255.0).astype(np.uint8))
                elif remove_bg:
                    print(
                        f"   ‚ö†Ô∏è  Suppression arri√®re-plan demand√©e mais rembg non disponible")

                # Redimensionner
                image = image.resize(
                    (self.config['image_size'], self.config['image_size']))

                images.append(image)
                print(f"   ‚úÖ Image {i+1}: {image.size}")

            except Exception as e:
                print(f"   ‚ùå Erreur image {i+1}: {e}")
                continue

        return images

    def generate_3d_mesh(self, images: List[Image.Image],
                         output_dir: str = "output") -> Optional[trimesh.Trimesh]:
        """
        G√©n√®re un mesh 3D √† partir des images avec loading bar

        Args:
            images: Liste des images pr√©par√©es
            output_dir: R√©pertoire de sortie

        Returns:
            Mesh 3D g√©n√©r√© ou None en cas d'erreur
        """
        print("üèóÔ∏è  G√©n√©ration du mesh 3D...")

        if not self.shape_pipeline:
            print("‚ùå Mod√®le de forme non charg√©")
            return None

        try:
            # Pr√©parer le g√©n√©rateur
            generator = torch.Generator(
                device=self.device).manual_seed(self.config['seed'])

            # G√©n√©rer selon le nombre d'images avec loading bar
            with tqdm(total=self.config['num_inference_steps'], desc="üîÑ G√©n√©ration mesh",
                      unit="step", colour="green") as pbar:

                if len(images) > 1:
                    # Mode multi-view
                    print(f"   üîÑ Mode multi-view avec {len(images)} images")

                    # Simuler le callback de progression
                    def callback(step, timestep, latents):
                        pbar.update(1)
                        pbar.set_postfix({"timestep": f"{timestep:.1f}"})

                    mesh = self.shape_pipeline(
                        image=images,
                        guidance_scale=self.config['guidance_scale'],
                        num_inference_steps=self.config['num_inference_steps'],
                        generator=generator,
                        callback=callback,
                        callback_steps=1
                    )[0]
                else:
                    # Mode single view
                    print("   üîÑ Mode single view")

                    def callback(step, timestep, latents):
                        pbar.update(1)
                        pbar.set_postfix({"timestep": f"{timestep:.1f}"})

                    mesh = self.shape_pipeline(
                        image=images[0],
                        guidance_scale=self.config['guidance_scale'],
                        num_inference_steps=self.config['num_inference_steps'],
                        generator=generator,
                        callback=callback,
                        callback_steps=1
                    )[0]

            # Statistiques du mesh
            print(
                f"   ‚úÖ Mesh g√©n√©r√©: {len(mesh.vertices)} vertices, {len(mesh.faces)} faces")

            # Sauvegarder le mesh temporaire
            output_path = Path(output_dir)
            output_path.mkdir(parents=True, exist_ok=True)

            temp_mesh_path = output_path / "temp_mesh.obj"
            mesh.export(str(temp_mesh_path))

            return mesh

        except Exception as e:
            print(f"‚ùå Erreur g√©n√©ration mesh: {e}")
            return None

    def apply_texture(self, mesh: trimesh.Trimesh,
                      reference_image: Image.Image) -> trimesh.Trimesh:
        """
        Applique une texture au mesh avec loading bar

        Args:
            mesh: Mesh 3D de base
            reference_image: Image de r√©f√©rence pour la texture

        Returns:
            Mesh textur√©
        """
        print("üé® Application de la texture...")

        if not self.texture_pipeline:
            print("‚ö†Ô∏è  Mod√®le de texture non charg√©, conservation du mesh sans texture")
            return mesh

        try:
            # Appliquer la texture avec loading bar
            with tqdm(total=self.config['texture_steps'], desc="üé® Application texture",
                      unit="step", colour="blue") as pbar:

                def callback(step, timestep, latents):
                    pbar.update(1)
                    pbar.set_postfix({"timestep": f"{timestep:.1f}"})

                textured_mesh = self.texture_pipeline(
                    mesh,
                    image=reference_image,
                    guidance_scale=self.config['texture_guidance_scale'],
                    num_inference_steps=self.config['texture_steps'],
                    callback=callback,
                    callback_steps=1
                )

            print("   ‚úÖ Texture appliqu√©e avec succ√®s")
            return textured_mesh

        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur application texture: {e}")
            print("   Retour au mesh sans texture")
            return mesh

    def render_video_with_utils(self, mesh: trimesh.Trimesh, output_dir: str = "output") -> Optional[str]:
        """
        G√©n√®re une vid√©o en rendant le mesh Hunyuan3D fourni

        Args:
            mesh: Mesh 3D Hunyuan3D √† rendre
            output_dir: R√©pertoire de sortie

        Returns:
            Chemin vers la vid√©o g√©n√©r√©e ou None en cas d'erreur
        """
        print("üé¨ Rendu vid√©o du mesh Hunyuan3D...")

        output_dir = Path(output_dir)
        output_dir.mkdir(parents=True, exist_ok=True)

        try:
            # Param√®tres de rendu
            n_views = self.config['n_views']
            elevation_deg = self.config['elevation_deg']
            height = self.config['height']
            width = self.config['width']
            fps = self.config['fps']

            # Pr√©parer le mesh avec l'orientation standard
            oriented_mesh = mesh.copy()
            oriented_mesh = to_gradio_3d_orientation(oriented_mesh)
            oriented_mesh = normalize_mesh(oriented_mesh)

            render_images = []

            print(f"   üìπ Rendu de {n_views} vues du mesh Hunyuan3D...")
            from tqdm import tqdm
            with tqdm(total=n_views, desc="üé¨ Rendu mesh Hunyuan3D", unit="vue", colour="cyan") as pbar:
                for i in range(n_views):
                    # Calculer l'azimuth pour cette vue
                    azimuth_deg = 360.0 * i / n_views

                    # Rendre la vue du mesh Hunyuan3D
                    render_image = render_mesh_view(
                        oriented_mesh,
                        azimuth_deg,
                        elevation_deg,
                        width,
                        height,
                        use_vertex_colors=True
                    )

                    render_images.append(render_image)
                    pbar.update(1)
                    pbar.set_postfix({"azimuth": f"{azimuth_deg:.1f}¬∞"})

            # Sauvegarder les images individuelles
            for ri, render_image in enumerate(render_images):
                render_image.save(output_dir / f"render_{ri:03d}.png")

            # Cr√©er la vid√©o
            if render_images:
                video_path = output_dir / "render.mp4"
                print(f"   üé¨ Cr√©ation vid√©o du mesh Hunyuan3D: {video_path}")
                save_video(render_images, str(video_path), fps=fps)
                print(
                    f"   ‚úÖ Vid√©o cr√©√©e depuis le mesh Hunyuan3D: {len(render_images)} vues")
                return str(video_path)

        except Exception as e:
            print(f"   ‚ùå Erreur rendu mesh Hunyuan3D: {e}")
            # Fallback: essayer la g√©n√©ration manuelle
            return self.render_video_manual_fallback(mesh, output_dir)

        return None

    def render_video_manual_fallback(self, mesh: trimesh.Trimesh, output_dir: Path) -> Optional[str]:
        """
        Fallback qui g√©n√®re manuellement si pas d'assets TripoSR
        """
        print("   üîÑ G√©n√©ration manuelle en fallback...")

        try:
            # Param√®tres de rendu
            n_views = self.config['n_views']
            elevation_deg = self.config['elevation_deg']
            height = self.config['height']
            width = self.config['width']
            fps = self.config['fps']

            # Pr√©parer le mesh avec l'orientation standard
            oriented_mesh = mesh.copy()
            oriented_mesh = to_gradio_3d_orientation(oriented_mesh)
            oriented_mesh = normalize_mesh(oriented_mesh)

            render_images = []

            from tqdm import tqdm
            with tqdm(total=n_views, desc="üé¨ Rendu manuel", unit="vue", colour="cyan") as pbar:
                for i in range(n_views):
                    # Calculer l'azimuth pour cette vue
                    azimuth_deg = 360.0 * i / n_views

                    # Utiliser l'utilitaire de rendu (qui cherchera d'abord TripoSR)
                    render_image = render_mesh_view(
                        oriented_mesh,
                        azimuth_deg,
                        elevation_deg,
                        width,
                        height,
                        use_vertex_colors=True
                    )

                    render_images.append(render_image)
                    pbar.update(1)
                    pbar.set_postfix({"azimuth": f"{azimuth_deg:.1f}¬∞"})

            # Sauvegarder les images individuelles
            for ri, render_image in enumerate(render_images):
                render_image.save(output_dir / f"render_{ri:03d}.png")

            # Cr√©er la vid√©o
            if render_images:
                video_path = output_dir / "render.mp4"
                save_video(render_images, str(video_path), fps=fps)
                return str(video_path)

        except Exception as e:
            print(f"   ‚ùå Erreur g√©n√©ration manuelle: {e}")
            return None

    def render_video(self, mesh: trimesh.Trimesh, output_dir: str = "output") -> Optional[str]:
        """
        G√©n√®re une vid√©o de rotation 360¬∞ (utilise les utilitaires modulaires)
        """
        return self.render_video_with_utils(mesh, output_dir)

    def post_process_mesh(self, mesh: trimesh.Trimesh) -> trimesh.Trimesh:
        """
        Post-traite le mesh pour optimiser la qualit√© tout en pr√©servant les d√©tails

        Args:
            mesh: Mesh d'entr√©e

        Returns:
            Mesh post-trait√©
        """
        print("üîß Post-processing du mesh (pr√©servation des d√©tails)...")

        try:
            # Nettoyage basique uniquement
            mesh.remove_duplicate_faces()
            mesh.remove_degenerate_faces()
            mesh.remove_unreferenced_vertices()

            # Lissage tr√®s l√©ger UNIQUEMENT si le mesh est tr√®s irr√©gulier
            # Pour pr√©server les d√©tails des pi√®ces, on applique un lissage minimal
            vertices_count = len(mesh.vertices)
            faces_count = len(mesh.faces)

            # Seulement lisser si le ratio faces/vertices est tr√®s √©lev√© (mesh tr√®s irr√©gulier)
            if vertices_count > 0 and faces_count / vertices_count > 3.0:
                print("   üîÑ Lissage minimal appliqu√© pour mesh irr√©gulier")
                # Lissage tr√®s l√©ger avec pr√©servation des d√©tails
                # Param√®tre tr√®s faible pour pr√©server les d√©tails
                mesh = mesh.smoothed(alpha=0.1)
            else:
                print("   ‚úÖ Mesh r√©gulier - pas de lissage pour pr√©server les d√©tails")

            print(
                f"   ‚úÖ Mesh optimis√©: {len(mesh.vertices)} vertices, {len(mesh.faces)} faces")
            return mesh

        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur post-processing: {e}")
            return mesh

    def post_process_coin_mesh(self, mesh: trimesh.Trimesh) -> trimesh.Trimesh:
        """
        Post-traite le mesh sp√©cifiquement pour les pi√®ces numismatiques
        Am√©liore la circularit√© et r√©duit les artefacts

        Args:
            mesh: Mesh d'entr√©e

        Returns:
            Mesh post-trait√© optimis√© pour pi√®ces
        """
        print("ü™ô Post-processing sp√©cialis√© pour pi√®ces numismatiques...")

        try:
            # √âtape 1: Nettoyage basique mais approfondi
            print("   üßπ Nettoyage approfondi du mesh...")
            mesh.remove_duplicate_faces()
            mesh.remove_degenerate_faces()
            mesh.remove_unreferenced_vertices()
            mesh.remove_infinite_values()

            # √âtape 2: Am√©lioration de la circularit√© si mode pi√®ce activ√©
            if self.config.get('coin_mode', False):
                print("   üîÑ Am√©lioration de la circularit√©...")

                # Centrer le mesh parfaitement
                mesh.vertices -= mesh.center_mass

                # Projection cylindrique pour am√©liorer la circularit√©
                vertices = mesh.vertices
                xy_center = np.mean(vertices[:, :2], axis=0)

                # Calculer le rayon moyen dans le plan XY
                distances = np.linalg.norm(vertices[:, :2] - xy_center, axis=1)
                mean_radius = np.mean(distances[distances > 0])

                if mean_radius > 0:
                    # Normaliser l√©g√®rement vers un cercle parfait (pr√©servation 90% des d√©tails)
                    directions = vertices[:, :2] - xy_center
                    current_distances = np.linalg.norm(directions, axis=1)

                    # √âviter la division par z√©ro
                    mask = current_distances > 1e-6
                    normalized_directions = np.zeros_like(directions)
                    normalized_directions[mask] = directions[mask] / \
                        current_distances[mask, np.newaxis]

                    # Appliquer une correction l√©g√®re vers la circularit√©
                    target_distances = current_distances * 0.9 + mean_radius * 0.1
                    new_positions = xy_center + normalized_directions * \
                        target_distances[:, np.newaxis]

                    mesh.vertices[:, :2] = new_positions
                    print(
                        f"   ‚úÖ Circularit√© am√©lior√©e (rayon moyen: {mean_radius:.3f})")

            # √âtape 3: Lissage adaptatif pour pi√®ces
            print("   üîÑ Lissage adaptatif pour pi√®ces...")
            vertices_count = len(mesh.vertices)
            faces_count = len(mesh.faces)

            # Lissage plus agressif pour les pi√®ces car on veut une surface lisse
            if vertices_count > 0:
                # Lissage mod√©r√© sp√©cifiquement pour les pi√®ces
                # Plus √©lev√© que le mode normal
                mesh = mesh.smoothed(alpha=0.2)

                # Lissage Laplacien l√©ger pour r√©duire les artefacts
                try:
                    # Appliquer un lissage Laplacien simple
                    for _ in range(2):  # 2 it√©rations l√©g√®res
                        new_vertices = mesh.vertices.copy()
                        for i, vertex in enumerate(mesh.vertices):
                            neighbors = []
                            for face in mesh.faces:
                                if i in face:
                                    neighbors.extend(face)
                            neighbors = list(set(neighbors))
                            neighbors.remove(i)

                            if neighbors:
                                neighbor_avg = np.mean(
                                    mesh.vertices[neighbors], axis=0)
                                new_vertices[i] = vertex * \
                                    0.8 + neighbor_avg * 0.2

                        mesh.vertices = new_vertices

                    print("   ‚úÖ Lissage Laplacien appliqu√©")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Lissage Laplacien √©chou√©: {e}")

            # √âtape 4: R√©duction des artefacts de bord
            if self.config.get('smooth_edges', False):
                print("   üîÑ Lissage des bords...")
                # Identifier les vertices de bord et les lisser davantage
                try:
                    boundary_vertices = mesh.vertices[mesh.outline().vertices]
                    if len(boundary_vertices) > 0:
                        # Lisser les bords de mani√®re circulaire
                        center = np.mean(boundary_vertices, axis=0)
                        for i in mesh.outline().vertices:
                            current_pos = mesh.vertices[i]
                            toward_center = (center - current_pos) * 0.1
                            mesh.vertices[i] = current_pos + toward_center

                        print("   ‚úÖ Bords liss√©s")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  Lissage des bords √©chou√©: {e}")

            # √âtape 5: Normalisation finale
            print("   üîÑ Normalisation finale...")
            mesh = normalize_mesh(mesh)

            print(
                f"   ‚úÖ Mesh pi√®ce optimis√©: {len(mesh.vertices)} vertices, {len(mesh.faces)} faces")
            return mesh

        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur post-processing pi√®ce: {e}")
            print("   üîÑ Retour au post-processing standard...")
            return self.post_process_mesh(mesh)

    def convert_to_stl(self, mesh: trimesh.Trimesh, output_path: str) -> bool:
        """
        Convertit le mesh en STL

        Args:
            mesh: Mesh √† convertir
            output_path: Chemin de sortie

        Returns:
            True si succ√®s, False sinon
        """
        print("üì¶ Conversion en STL...")

        try:
            # Post-traiter le mesh
            processed_mesh = self.post_process_mesh(mesh)

            # Exporter en STL
            processed_mesh.export(output_path)

            # V√©rifier le fichier
            file_size = Path(output_path).stat().st_size / 1024 / 1024  # MB
            print(f"   ‚úÖ STL g√©n√©r√©: {file_size:.2f} MB")

            return True

        except Exception as e:
            print(f"   ‚ùå Erreur conversion STL: {e}")
            return False

    def convert_coin_to_stl(self, front_image: str, back_image: str = None,
                            output_dir: str = "output_hunyuan3d",
                            remove_background: bool = False,
                            render_video: bool = True,
                            enable_post_processing: bool = False) -> Optional[str]:
        """
        Convertit une pi√®ce (avers/revers) en STL avec utilitaires modulaires

        Args:
            front_image: Chemin vers l'image de face
            back_image: Chemin vers l'image de dos (optionnel)
            output_dir: R√©pertoire de sortie
            remove_background: Supprimer l'arri√®re-plan
            render_video: G√©n√©rer une vid√©o de rotation

        Returns:
            Chemin vers le fichier STL ou None en cas d'erreur
        """
        print("ü™ô Conversion de pi√®ce avec Hunyuan3D-2mv (utilitaires modulaires)")
        print("=" * 70)

        start_time = time.time()

        # Pr√©parer les images
        image_paths = [front_image]
        if back_image:
            image_paths.append(back_image)

        images = self.prepare_images(image_paths, remove_background)
        if not images:
            print("‚ùå Aucune image pr√©par√©e")
            return None

        # G√©n√©rer le mesh 3D
        mesh = self.generate_3d_mesh(images, output_dir)
        if not mesh:
            print("‚ùå √âchec g√©n√©ration mesh")
            return None

        # Appliquer la texture
        textured_mesh = self.apply_texture(mesh, images[0])

        # Post-traiter le mesh si activ√©
        if enable_post_processing:
            print("üîÑ Post-processing simplifi√© (√©vite les blocages)")
            final_mesh = self.post_process_mesh(textured_mesh)
        else:
            print("üîÑ Post-processing d√©sactiv√© - pr√©servation maximale des d√©tails")
            final_mesh = textured_mesh

        # Convertir en STL
        stl_path = Path(output_dir) / "coin_model.stl"
        if self.convert_to_stl(final_mesh, str(stl_path)):
            elapsed_time = time.time() - start_time

            print(f"\n‚úÖ Conversion termin√©e en {elapsed_time:.1f}s")
            print(f"üìÅ Fichier STL: {stl_path}")

            # G√©n√©rer la vid√©o si demand√© (avec utilitaires modulaires)
            if render_video:
                video_path = self.render_video(final_mesh, output_dir)
                if video_path:
                    print(
                        f"üé¨ Vid√©o g√©n√©r√©e (utilitaires modulaires): {video_path}")

            if back_image:
                print("üîÑ Mod√®le g√©n√©r√© avec avers et revers")
            else:
                print("üîÑ Mod√®le g√©n√©r√© avec vue unique")

            return str(stl_path)

        return None


def convert_coin_hunyuan3d(front_image: str, back_image: str = None,
                           output_dir: str = "output_hunyuan3d",
                           model_path: str = "tencent/Hunyuan3D-2",
                           remove_background: bool = False,
                           render_video: bool = True,
                           enable_post_processing: bool = False) -> Optional[str]:
    """
    Fonction de convenance pour convertir une pi√®ce avec Hunyuan3D-2mv

    Args:
        front_image: Chemin vers l'image de face
        back_image: Chemin vers l'image de dos (optionnel)
        output_dir: R√©pertoire de sortie
        model_path: Chemin vers le mod√®le Hunyuan3D
        remove_background: Supprimer l'arri√®re-plan
        render_video: G√©n√©rer une vid√©o de rotation

    Returns:
        Chemin vers le fichier STL ou None en cas d'erreur
    """
    # Cr√©er le convertisseur
    converter = Hunyuan3DConverter(model_path)

    # V√©rifier l'environnement
    if not converter.check_environment():
        return None

    # Charger les mod√®les
    if not converter.load_models():
        return None

    # Convertir
    return converter.convert_coin_to_stl(
        front_image, back_image, output_dir, remove_background, render_video, enable_post_processing
    )


def get_hunyuan3d_info():
    """Retourne des informations sur Hunyuan3D-2"""
    info = {
        'name': 'Hunyuan3D-2mv (compl√®tement ind√©pendant)',
        'description': 'Mod√®le de g√©n√©ration 3D multi-view avec rendu vid√©o ind√©pendant',
        'features': [
            'Support multi-view (avers/revers)',
            'G√©n√©ration haute r√©solution',
            'Texture r√©aliste',
            'Rendu vid√©o ind√©pendant (sans TripoSR)',
            'Loading bars de progression',
            'Suppression arri√®re-plan',
            'Optimis√© pour pi√®ces numismatiques',
            'Compl√®tement ind√©pendant de TripoSR'
        ],
        'requirements': [
            'CUDA 11.8+ (recommand√©)',
            'GPU avec 16GB+ VRAM',
            'Python 3.8+',
            'Hunyuan3D-2 install√©',
            'tqdm pour les loading bars',
            'matplotlib pour le rendu vid√©o'
        ]
    }
    return info

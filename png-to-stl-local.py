#!/usr/bin/env python3
"""
Convertisseur PNG vers STL avec TripoSR - Version Locale
Adapt√© pour fonctionner sur Windows avec GPU NVIDIA
"""

import os
import sys
import torch
import time
from PIL import Image
import numpy as np
import rembg
import pymeshlab as pymesh
import argparse
from pathlib import Path
import subprocess
import pkg_resources
import warnings

# Supprimer les warnings pour une sortie plus propre
warnings.filterwarnings("ignore", category=UserWarning)
warnings.filterwarnings("ignore", category=FutureWarning)


def check_and_install_dependencies():
    """V√©rifie et installe les d√©pendances n√©cessaires - bas√© sur le script Google Colab qui fonctionne"""
    required_packages = [
        'scikit-image==0.19.3',  # Version qui fonctionne avec Pillow 9.5.0
        'PyMCubes',
        'huggingface_hub',
        'opencv-python',
        'onnxruntime',
        'rembg',
        'pymeshlab',
        'omegaconf',
        'plyfile',
        'tqdm',
        'mcubes',
        'trimesh',
        'diffusers',
        'transformers',
        'accelerate',
        'safetensors',
        # 'einops==0.7.0',  # Requis par TripoSR
        'xatlas==0.0.9',
        'moderngl==5.10.0',
        'imageio[ffmpeg]'
    ]

    print("V√©rification des d√©pendances...")
    missing_packages = []

    # V√©rifier les packages de base
    packages_to_check = {
        'skimage': 'scikit-image==0.19.3',
        'PIL': 'pillow==9.5.0',  # D√©j√† install√©
        'cv2': 'opencv-python',
        'rembg': 'rembg',
        'pymeshlab': 'pymeshlab',
        'omegaconf': 'omegaconf',
        'plyfile': 'plyfile',
        'tqdm': 'tqdm',
        'trimesh': 'trimesh',
        'diffusers': 'diffusers',
        'transformers': 'transformers',
        'accelerate': 'accelerate',
        'safetensors': 'safetensors',
        'einops': 'einops==0.7.0',
        'xatlas': 'xatlas==0.0.9',
        'moderngl': 'moderngl==5.10.0',
        'imageio': 'imageio[ffmpeg]'
    }

    for package, install_name in packages_to_check.items():
        try:
            if package == 'PIL':
                import PIL
            elif package == 'cv2':
                import cv2
            elif package == 'skimage':
                import skimage
            else:
                __import__(package)
        except ImportError:
            missing_packages.append(install_name)

    # V√©rifier PyMCubes s√©par√©ment
    try:
        import mcubes
    except ImportError:
        missing_packages.append('PyMCubes')

    if missing_packages:
        print(f"Installation des packages manquants: {missing_packages}")
        for package in missing_packages:
            print(f"Installation de {package}...")
            if 'git+' in package:
                subprocess.check_call(
                    [sys.executable, "-m", "pip", "install", package])
            else:
                subprocess.check_call(
                    [sys.executable, "-m", "pip", "install", package])
    else:
        print("Toutes les d√©pendances sont d√©j√† install√©es!")

    # Installer torchmcubes depuis git (comme dans le script Colab)
    try:
        import torchmcubes
    except ImportError:
        print("Installation de torchmcubes depuis GitHub...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install",
            "git+https://github.com/tatsy/torchmcubes.git"
        ])


def setup_triposr():
    """Clone et configure TripoSR si n√©cessaire - bas√© sur le script Google Colab"""
    triposr_path = Path("TripoSR")

    if not triposr_path.exists():
        print("Clonage du d√©p√¥t TripoSR...")
        subprocess.run(
            ["git", "clone", "https://github.com/pyimagesearch/TripoSR.git"], check=True)

    # S'assurer que nous sommes dans le bon r√©pertoire (comme dans le script Colab)
    if (triposr_path / "TripoSR").exists():
        # Structure: TripoSR/TripoSR/
        triposr_dir = triposr_path / "TripoSR"
        sys.path.insert(0, str(triposr_dir))
        sys.path.insert(0, str(triposr_dir / "tsr"))
        print(f"Configuration TripoSR: {triposr_dir}")
    else:
        # Structure: TripoSR/
        sys.path.insert(0, str(triposr_path))
        sys.path.insert(0, str(triposr_path / "tsr"))
        print(f"Configuration TripoSR: {triposr_path}")

    # Installer les d√©pendances du projet TripoSR (comme dans le script Colab)
    requirements_file = triposr_path / "requirements.txt"
    if requirements_file.exists():
        print("Installation des d√©pendances TripoSR...")
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", str(
                requirements_file), "-q"
        ])

    return triposr_path


def check_cuda_compatibility():
    """V√©rifie la compatibilit√© CUDA et affiche les informations GPU"""
    if not torch.cuda.is_available():
        print("‚ö†Ô∏è  CUDA non disponible. Le traitement sera effectu√© sur CPU (beaucoup plus lent).")
        print("   Pour utiliser le GPU, assurez-vous que:")
        print("   1. CUDA Toolkit 11.8+ est install√©")
        print("   2. Les drivers NVIDIA sont √† jour")
        print("   3. PyTorch avec support CUDA est install√©")
        return False

    print(f"‚úÖ CUDA disponible!")
    print(f"   GPU: {torch.cuda.get_device_name(0)}")
    print(
        f"   M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    print(f"   Version CUDA: {torch.version.cuda}")

    # V√©rifier la m√©moire disponible
    torch.cuda.empty_cache()
    memory_free = torch.cuda.get_device_properties(
        0).total_memory - torch.cuda.memory_allocated(0)
    memory_free_gb = memory_free / 1024**3

    if memory_free_gb < 4:
        print(f"‚ö†Ô∏è  M√©moire GPU faible: {memory_free_gb:.1f} GB disponible")
        print("   Fermez les autres applications utilisant le GPU pour de meilleures performances.")

    return True


def detect_and_convert_image_format(image_path):
    """
    D√©tecte le format d'image et le convertit si n√©cessaire
    Supporte: PNG, WebP, JPEG, JPG, BMP, TIFF

    Args:
        image_path: Chemin vers l'image d'entr√©e

    Returns:
        PIL.Image: Image convertie en RGB/RGBA
        str: Format original d√©tect√©
    """
    try:
        image = Image.open(image_path)
        original_format = image.format.lower() if image.format else "unknown"

        print(f"   Format d√©tect√©: {original_format.upper()}")

        # Formats support√©s
        supported_formats = ['png', 'webp',
                             'jpeg', 'jpg', 'bmp', 'tiff', 'tif']

        if original_format not in supported_formats:
            print(
                f"   ‚ö†Ô∏è  Format '{original_format}' non test√©, tentative de conversion...")

        # Convertir vers RGB/RGBA selon le besoin
        if image.mode in ('RGBA', 'LA', 'P'):
            if 'transparency' in image.info:
                # Garder la transparence
                image = image.convert('RGBA')
            else:
                # Convertir en RGB si pas de transparence
                image = image.convert('RGB')
        elif image.mode in ('L', 'I', 'F'):
            # Images en niveaux de gris
            image = image.convert('RGB')
        elif image.mode not in ('RGB', 'RGBA'):
            # Autres modes, convertir en RGB
            print(f"   Conversion du mode {image.mode} vers RGB")
            image = image.convert('RGB')

        return image, original_format

    except Exception as e:
        print(f"‚ùå Erreur lors de la conversion du format: {e}")
        raise


def convert_png_to_stl(input_image_path, output_dir="output", remove_bg=False, render_video=True, reverse_image_path=None):
    """
    Convertit une image (PNG, WebP, JPEG, etc.) en mod√®le STL avec possibilit√© d'ajouter une vue de revers

    Args:
        input_image_path: Chemin vers l'image d'entr√©e (recto) - supporte PNG, WebP, JPEG, BMP, TIFF
        output_dir: R√©pertoire de sortie pour les fichiers g√©n√©r√©s
        remove_bg: Si True, supprime l'arri√®re-plan de l'image
        render_video: Si True, g√©n√®re une vid√©o du mod√®le 3D
        reverse_image_path: Chemin optionnel vers l'image de revers (verso)
    """

    # Importer les modules TripoSR (avec gestion d'erreur comme dans le script Colab)
    try:
        from tsr.system import TSR
        from tsr.utils import remove_background, resize_foreground, save_video
        print("Importations sp√©cifiques √† TripoSR r√©ussies!")
    except ImportError as e:
        print(f"Erreur lors de l'importation des modules TripoSR: {e}")
        print("Tentative de correction en installant les packages manquants...")

        # Installer les packages manquants (comme dans le script Colab)
        missing_packages = ['mcubes', 'trimesh', 'diffusers',
                            'transformers', 'accelerate', 'safetensors']
        for package in missing_packages:
            try:
                subprocess.check_call(
                    [sys.executable, "-m", "pip", "install", "-q", package])
            except subprocess.CalledProcessError:
                print(f"Erreur lors de l'installation de {package}")

        # R√©essayer l'importation
        import importlib
        importlib.invalidate_caches()
        try:
            from tsr.system import TSR
            from tsr.utils import remove_background, resize_foreground, save_video
            print("Importations r√©ussies apr√®s correction!")
        except ImportError as e:
            print(f"√âchec des importations apr√®s tentative de correction: {e}")
            print(
                "Le script ne pourra pas continuer. Veuillez v√©rifier votre environnement.")
            return None

    # Configuration
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"\nüîß Configuration:")
    print(f"   P√©riph√©rique: {device.upper()}")

    # V√©rifier si nous avons une image de revers
    has_reverse_image = reverse_image_path is not None and Path(
        reverse_image_path).exists()
    if has_reverse_image:
        print(f"   Mode: Reconstruction optimis√©e avec 2 vues (traitement s√©par√©)")
        print(f"   Image recto: {input_image_path}")
        print(f"   Image verso: {reverse_image_path}")
    else:
        print(f"   Mode: Reconstruction standard avec 1 vue")
        if reverse_image_path:
            print(
                f"   ‚ö†Ô∏è  Image de revers sp√©cifi√©e mais introuvable: {reverse_image_path}")

    if device == "cuda":
        # Nettoyer la m√©moire GPU avant de commencer
        torch.cuda.empty_cache()

    # Param√®tres TripoSR optimis√©s
    pretrained_model_name_or_path = "stabilityai/TripoSR"
    chunk_size = 8192
    foreground_ratio = 0.85
    model_save_format = "obj"
    mc_resolution = 256  # Param√®tre officiel TripoSR
    # Optimis√© pour objets solides (chaises, etc.) - 25.0 cause des rendus bizarres
    mc_threshold = 10.0

    # Cr√©er le r√©pertoire de sortie
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)

    # Charger l'image principale
    print(f"\nüì∑ Chargement de l'image principale: {input_image_path}")
    try:
        image, original_format = detect_and_convert_image_format(
            input_image_path)
        print(f"   Taille originale: {image.size}")
        print(f"   Mode: {image.mode}")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement de l'image: {e}")
        return None

    # Charger l'image de revers si disponible
    reverse_image = None
    if has_reverse_image:
        print(f"\nüì∑ Chargement de l'image de revers: {reverse_image_path}")
        try:
            reverse_image, _ = detect_and_convert_image_format(
                reverse_image_path)
            print(f"   Taille originale: {reverse_image.size}")
            print(f"   Mode: {reverse_image.mode}")
        except Exception as e:
            print(f"‚ö†Ô∏è  Erreur lors du chargement de l'image de revers: {e}")
            print("   Poursuite avec l'image principale seulement...")
            has_reverse_image = False
            reverse_image = None

    # Redimensionner les images
    original_image_resized = image.resize((512, 512))
    if has_reverse_image:
        reverse_image_resized = reverse_image.resize((512, 512))

    # Cr√©er le dossier examples
    examples_dir = Path("examples")
    examples_dir.mkdir(exist_ok=True)
    original_image_resized.save(examples_dir / "product.png")
    if has_reverse_image:
        reverse_image_resized.save(examples_dir / "product_reverse.png")

    # Initialiser le mod√®le TripoSR
    print(f"\nü§ñ Chargement du mod√®le TripoSR...")
    print("   (Cela peut prendre quelques minutes lors de la premi√®re utilisation)")
    try:
        model = TSR.from_pretrained(
            pretrained_model_name_or_path,
            config_name="config.yaml",
            weight_name="model.ckpt",
        )
        model.renderer.set_chunk_size(chunk_size)
        model.to(device)
        print("‚úÖ Mod√®le charg√© avec succ√®s!")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        print("   V√©rifiez votre connexion internet et r√©essayez.")
        return None

    # Traiter les images
    print(f"\nüé® Traitement des images...")
    processed_images = []

    try:
        # Traitement de l'image principale
        print("   Traitement de l'image principale (recto)...")
        if remove_bg:
            print("   Suppression de l'arri√®re-plan...")
            rembg_session = rembg.new_session()
            processed_main = remove_background(
                original_image_resized, rembg_session)
        else:
            processed_main = original_image_resized

        # Redimensionner l'image
        processed_main = resize_foreground(processed_main, foreground_ratio)

        # G√©rer les images RGBA
        if processed_main.mode == "RGBA":
            print("   Conversion RGBA vers RGB...")
            processed_main = np.array(
                processed_main).astype(np.float32) / 255.0
            processed_main = processed_main[:, :, :3] * processed_main[:, :, 3:4] + \
                (1 - processed_main[:, :, 3:4]) * 0.5
            processed_main = Image.fromarray(
                (processed_main * 255.0).astype(np.uint8))

        processed_images.append(processed_main)

        # Traitement de l'image de revers si disponible
        if has_reverse_image:
            print("   Traitement de l'image de revers (verso)...")
            if remove_bg:
                reverse_processed = remove_background(
                    reverse_image_resized, rembg_session)
            else:
                reverse_processed = reverse_image_resized

            reverse_processed = resize_foreground(
                reverse_processed, foreground_ratio)

            if reverse_processed.mode == "RGBA":
                reverse_processed = np.array(
                    reverse_processed).astype(np.float32) / 255.0
                reverse_processed = reverse_processed[:, :, :3] * reverse_processed[:, :, 3:4] + \
                    (1 - reverse_processed[:, :, 3:4]) * 0.5
                reverse_processed = Image.fromarray(
                    (reverse_processed * 255.0).astype(np.uint8))

            processed_images.append(reverse_processed)

        # Cr√©er le r√©pertoire de sortie pour cette image
        image_dir = output_dir / "0"
        image_dir.mkdir(exist_ok=True)

        # Sauvegarder les images trait√©es
        for i, proc_img in enumerate(processed_images):
            suffix = "" if i == 0 else f"_reverse"
            proc_img.save(image_dir / f"input{suffix}.png")

        print(f"‚úÖ {len(processed_images)} image(s) trait√©e(s) et sauvegard√©e(s)")

    except Exception as e:
        print(f"‚ö†Ô∏è  Erreur lors du traitement des images: {e}")
        print("   Utilisation des images originales...")
        processed_images = [original_image_resized]
        if has_reverse_image:
            processed_images.append(reverse_image_resized)

        image_dir = output_dir / "0"
        image_dir.mkdir(exist_ok=True)
        for i, proc_img in enumerate(processed_images):
            suffix = "" if i == 0 else f"_reverse"
            proc_img.save(image_dir / f"input{suffix}.png")

    # G√©n√©rer le mod√®le 3D avec approche optimis√©e
    print(f"\nüèóÔ∏è  G√©n√©ration du mod√®le 3D...")
    start_time = time.time()

    try:
        if has_reverse_image and len(processed_images) > 1:
            print("   üîÑ Mode 2 vues: Reconstruction optimis√©e...")
            print("   üìê G√©n√©ration du mod√®le principal (recto)...")

            # G√©n√©rer le mod√®le principal avec des param√®tres optimis√©s
            with torch.no_grad():
                scene_codes_main = model([processed_images[0]], device=device)

            print(
                "   üéØ Utilisation de la vue principale pour une reconstruction de qualit√©")
            scene_codes = scene_codes_main

            # Note: Pour l'instant, on utilise principalement la vue principale
            # Une approche plus sophistiqu√©e pourrait fusionner les deux reconstructions

        else:
            print("   üìê G√©n√©ration des codes de sc√®ne (vue unique)...")
            with torch.no_grad():
                scene_codes = model([processed_images[0]], device=device)

        # Rendre les vues si demand√©
        if render_video:
            print("   üé¨ Rendu des vues multiples (30 vues)...")
            render_images = model.render(
                scene_codes, n_views=30, return_type="pil")
            for ri, render_image in enumerate(render_images[0]):
                render_image.save(image_dir / f"render_{ri:03d}.png")

            # Cr√©er une vid√©o
            print("   üéûÔ∏è  Cr√©ation de la vid√©o...")
            save_video(render_images[0], str(image_dir / "render.mp4"), fps=30)
            print(f"   ‚úÖ Vid√©o sauvegard√©e: {image_dir / 'render.mp4'}")

        # Extraire et sauvegarder le maillage avec param√®tres optimis√©s
        print("   üîß Extraction du maillage 3D (haute qualit√©)...")
        meshes = model.extract_mesh(
            scene_codes,
            has_vertex_color=False,
            resolution=mc_resolution,
            threshold=mc_threshold
        )
        mesh_file = image_dir / f"mesh.{model_save_format}"
        meshes[0].export(str(mesh_file))
        print(f"   ‚úÖ Mod√®le 3D sauvegard√©: {mesh_file}")

        # Convertir en STL
        print("   üì¶ Conversion en STL...")
        ms = pymesh.MeshSet()
        ms.load_new_mesh(str(mesh_file))

        # Appliquer des filtres pour am√©liorer la qualit√© avec gestion d'erreur robuste
        print("   üîß Application de filtres de qualit√©...")

        # D√©couvrir les filtres disponibles
        def discover_available_filters(ms):
            """D√©couvre les filtres disponibles dans cette version de PyMeshLab"""
            available_filters = set()
            try:
                # Capturer la sortie de print_filter_list() pour d√©couvrir les filtres
                import io
                import contextlib

                f = io.StringIO()
                with contextlib.redirect_stdout(f):
                    ms.print_filter_list()

                filter_output = f.getvalue()
                # Extraire les noms de filtres de la sortie
                for line in filter_output.split('\n'):
                    if line.strip() and not line.startswith(' ') and ':' in line:
                        filter_name = line.split(':')[0].strip()
                        if filter_name:
                            available_filters.add(filter_name)

                print(
                    f"   üìã {len(available_filters)} filtres PyMeshLab d√©couverts")
                return available_filters

            except Exception as e:
                print(f"   ‚ö†Ô∏è  Impossible de d√©couvrir les filtres: {e}")
                return set()

        # Fonction helper pour appliquer les filtres de mani√®re s√©curis√©e
        def apply_filter_safe(ms, filter_name, **kwargs):
            try:
                ms.apply_filter(filter_name, **kwargs)
                print(f"   ‚úÖ Filtre appliqu√©: {filter_name}")
                return True
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Filtre ignor√© ({filter_name}): {str(e)}")
                return False

        # D√©couvrir les filtres disponibles
        available_filters = discover_available_filters(ms)

        # Fonction pour trouver le meilleur filtre disponible
        def find_available_filter(candidates, available_filters):
            for candidate in candidates:
                if candidate in available_filters:
                    return candidate
            return None

        # Essayer diff√©rents noms de filtres selon la version de PyMeshLab
        applied_filters = 0

        # Supprimer les composants isol√©s (nouveaux noms PyMeshLab 2022.2+)
        cleanup_filters = [
            # Nouveaux noms (2022.2+)
            'meshing_remove_connected_component_by_diameter',
            'meshing_remove_connected_component_by_face_number',
            'meshing_remove_duplicate_vertices',
            'meshing_remove_unreferenced_vertices',
            'meshing_remove_null_faces',
            'meshing_remove_t_vertices',
            # Anciens noms (compatibility)
            'remove_isolated_pieces_wrt_diameter',
            'remove_isolated_folded_faces',
            'remove_zero_area_faces',
            'remove_duplicate_vertices',
            'remove_unreferenced_vertices'
        ]

        for filter_name in cleanup_filters:
            if filter_name in available_filters:
                if apply_filter_safe(ms, filter_name):
                    applied_filters += 1

        # Lisser l√©g√®rement le maillage (activ√© par d√©faut)
        apply_smoothing = True  # Valeur par d√©faut
        if apply_smoothing:
            smooth_filters = [
                # Nouveaux noms (2022.2+)
                'apply_coord_laplacian_smoothing',
                'apply_coord_taubin_smoothing',
                'apply_coord_hc_laplacian_smoothing',
                # Anciens noms (compatibility)
                'laplacian_smooth',
                'taubin_smooth',
                'hc_laplacian_smooth'
            ]

            smoothed = False
            for filter_name in smooth_filters:
                if filter_name in available_filters:
                    smooth_params = {
                        'stepsmoothnum': 2} if 'laplacian' in filter_name else {}
                    if apply_filter_safe(ms, filter_name, **smooth_params):
                        smoothed = True
                        break

            if not smoothed:
                print("   ‚ö†Ô∏è  Aucun filtre de lissage disponible")

        # Simplifier si n√©cessaire (r√©duire le bruit)
        vertex_count = ms.current_mesh().vertex_number()
        if vertex_count > 50000:
            print(
                f"   üìä Maillage dense d√©tect√© ({vertex_count} vertices), simplification...")

            simplification_filters = [
                # Nouveaux noms (2022.2+)
                'meshing_decimation_quadric_edge_collapse',
                'meshing_decimation_clustering',
                # Anciens noms (compatibility)
                'simplification_quadric_edge_collapse_decimation',
                'simplification_clustering_decimation'
            ]

            simplified = False
            for filter_name in simplification_filters:
                if filter_name in available_filters:
                    if 'quadric' in filter_name:
                        params = {'targetfacenum': 25000}
                    else:
                        params = {'threshold': 0.01}

                    if apply_filter_safe(ms, filter_name, **params):
                        simplified = True
                        break

            if not simplified:
                print("   ‚ö†Ô∏è  Aucun filtre de simplification disponible")

        print(f"   üìä Filtres appliqu√©s avec succ√®s: {applied_filters}")

        # Afficher quelques statistiques du maillage final
        final_mesh = ms.current_mesh()
        print(
            f"   üìà Maillage final: {final_mesh.vertex_number()} vertices, {final_mesh.face_number()} faces")

        # Sauvegarder le STL final
        stl_file = output_dir / f"{Path(input_image_path).stem}.stl"
        try:
            ms.save_current_mesh(str(stl_file))
        except Exception as e:
            print(f"   ‚ö†Ô∏è  Erreur lors de la sauvegarde avec filtres: {e}")
            print("   üîÑ Tentative de sauvegarde directe...")
            # En cas d'√©chec, sauvegarder le mesh original
            ms_backup = pymesh.MeshSet()
            ms_backup.load_new_mesh(str(mesh_file))
            ms_backup.save_current_mesh(str(stl_file))

        elapsed_time = time.time() - start_time
        print(f"‚úÖ Fichier STL g√©n√©r√©: {stl_file}")
        print(f"‚è±Ô∏è  Temps total: {elapsed_time:.1f} secondes")

        if has_reverse_image:
            print(f"üéØ Reconstruction optimis√©e avec r√©f√©rence verso!")
            print(
                f"üí° Conseil: La vue de revers a √©t√© utilis√©e comme r√©f√©rence pour am√©liorer la qualit√©")

        return str(stl_file)

    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration du mod√®le 3D: {str(e)}")
        import traceback
        print(f"üí° D√©tails de l'erreur: {traceback.format_exc()}")
        if "out of memory" in str(e).lower():
            print(
                "   üí° Conseil: Fermez les autres applications utilisant le GPU et r√©essayez.")
        return None


def main():
    parser = argparse.ArgumentParser(
        description="Convertir une image (PNG, WebP, JPEG, etc.) en mod√®le STL")
    parser.add_argument(
        "input", help="Chemin vers l'image d'entr√©e (PNG, WebP, JPEG, BMP, TIFF)")
    parser.add_argument("-o", "--output", default="output",
                        help="R√©pertoire de sortie (d√©faut: output)")
    parser.add_argument("--remove-bg", action="store_true",
                        help="Supprimer l'arri√®re-plan de l'image")
    parser.add_argument("--no-video", action="store_true",
                        help="Ne pas g√©n√©rer de vid√©o du mod√®le")
    parser.add_argument("--reverse-image",
                        help="Chemin vers l'image de revers (verso) pour am√©liorer la reconstruction 3D")
    parser.add_argument("--mc-resolution", type=int, default=256,
                        help="R√©solution du marching cubes (d√©faut: 256 - param√®tre officiel TripoSR)")
    parser.add_argument("--mc-threshold", type=float, default=10.0,
                        help="Seuil du marching cubes (d√©faut: 10.0 - param√®tre optimis√© pour objets solides)")
    parser.add_argument("--no-smooth", action="store_true",
                        help="D√©sactiver le lissage du maillage")
    parser.add_argument("--foreground-ratio", type=float, default=0.85,
                        help="Ratio de l'objet dans l'image (d√©faut: 0.85 - param√®tre officiel TripoSR)")
    parser.add_argument("--debug", action="store_true",
                        help="Afficher les informations de diagnostic (filtres disponibles, etc.)")
    parser.add_argument("--setup", action="store_true",
                        help="Installer les d√©pendances et configurer l'environnement")
    parser.add_argument("--tips", action="store_true",
                        help="Afficher les conseils d'optimisation pour pi√®ces numismatiques")

    args = parser.parse_args()

    print("üöÄ Convertisseur d'Images vers STL avec TripoSR")
    print("   Formats support√©s: PNG, WebP, JPEG, BMP, TIFF")
    print("=" * 50)

    if args.setup:
        print("‚öôÔ∏è  Configuration de l'environnement...")
        check_and_install_dependencies()
        setup_triposr()
        print("\n‚úÖ Configuration termin√©e! Vous pouvez maintenant utiliser le script.")
        print(f"üí° Exemple PNG: python {sys.argv[0]} mon_image.png")
        print(f"üí° Exemple WebP: python {sys.argv[0]} mon_image.webp")
        print(
            f"üí° Avec revers: python {sys.argv[0]} recto.png --reverse-image verso.webp")
        print(
            f"üí° Haute qualit√©: python {sys.argv[0]} image.png --mc-resolution 1024")
        print(f"üí° Diagnostic: python {sys.argv[0]} image.png --debug")
        print(f"üí° Conseils: python {sys.argv[0]} --tips")
        return

    if args.tips:
        print_coin_tips()
        return

    if args.debug:
        print("üîç Mode diagnostic activ√©...")
        diagnostic_info()
        if not Path(args.input).exists():
            print(f"‚ùå Erreur: Le fichier '{args.input}' n'existe pas.")
            return
        # Continuer avec la conversion mais avec plus d'informations de debug

    if not Path(args.input).exists():
        print(f"‚ùå Erreur: Le fichier '{args.input}' n'existe pas.")
        return

    # V√©rifier l'image de revers si sp√©cifi√©e
    if args.reverse_image and not Path(args.reverse_image).exists():
        print(
            f"‚ö†Ô∏è  Attention: L'image de revers '{args.reverse_image}' n'existe pas.")
        print("   La reconstruction se fera avec l'image principale seulement.")

    # V√©rifier CUDA
    check_cuda_compatibility()

    # Setup TripoSR si n√©cessaire
    print(f"\nüì¶ Configuration de TripoSR...")
    setup_triposr()

    # Convertir l'image avec les param√®tres par d√©faut TripoSR
    if args.mc_resolution == 256 and args.mc_threshold == 10.0 and args.foreground_ratio == 0.85:
        # Utiliser les param√®tres par d√©faut optimis√©s pour pi√®ces numismatiques
        print("üîß Mode automatique d√©tect√©: Utilisation des param√®tres officiels TripoSR")
        stl_file = convert_coin_to_stl_safe(
            args.input,
            args.output,
            remove_bg=args.remove_bg,
            render_video=not args.no_video,
            reverse_image_path=args.reverse_image
        )
    else:
        # Utiliser les param√®tres personnalis√©s de l'utilisateur
        print(
            f"üîß Utilisation des param√®tres personnalis√©s: r√©solution={args.mc_resolution}, seuil={args.mc_threshold}, ratio={args.foreground_ratio}")
        stl_file = convert_png_to_stl(
            args.input,
            args.output,
            remove_bg=args.remove_bg,
            render_video=not args.no_video,
            reverse_image_path=args.reverse_image
        )

    print("\n" + "=" * 50)
    if stl_file:
        print(f"üéâ Conversion termin√©e avec succ√®s!")
        print(f"üìÅ Fichier STL: {stl_file}")
        print(f"üìÅ Dossier de sortie: {args.output}")
        if not args.no_video:
            print(f"üé¨ Vid√©o disponible dans: {args.output}/0/render.mp4")
        if args.reverse_image:
            print(f"üîÑ Images utilis√©es: {args.input} + {args.reverse_image}")
        print(
            f"‚öôÔ∏è  Param√®tres utilis√©s: r√©solution={args.mc_resolution}, seuil={args.mc_threshold}")
    else:
        print("‚ùå √âchec de la conversion.")
        print("üí° V√©rifiez les messages d'erreur ci-dessus pour plus d'informations.")
        print("üí° Essayez d'ajuster --mc-resolution ou --mc-threshold")
        print("üí° Utilisez --debug pour plus d'informations de diagnostic")


def convert_coin_to_stl_safe(input_image_path, output_dir="output", remove_bg=False,
                             render_video=True, reverse_image_path=None):
    """
    VERSION S√âCURIS√âE pour pi√®ces numismatiques avec gestion automatique de la m√©moire GPU.
    √âvite les erreurs "CUDA out of memory" en adaptant automatiquement les param√®tres.

    Cette fonction remplace convert_coin_to_stl avec une meilleure gestion des ressources.
    """

    print("üîß Mode TripoSR S√âCURIS√â avec gestion automatique de la m√©moire")

    # Obtenir les param√®tres optimaux pour le GPU d√©tect√©
    gpu_settings = get_optimal_settings_for_gpu()
    print(f"   {gpu_settings['device_info']}")

    # Importer les modules TripoSR
    try:
        from tsr.system import TSR
        from tsr.utils import remove_background, resize_foreground, save_video
    except ImportError as e:
        print(f"‚ùå Erreur importation TripoSR: {e}")
        return None

    # Configuration avec param√®tres adapt√©s au GPU
    device = "cuda" if torch.cuda.is_available() else "cpu"
    mc_resolution = gpu_settings['mc_resolution']
    image_size = gpu_settings['image_size']
    chunk_size = gpu_settings['chunk_size']

    print(f"\nüîß Configuration s√©curis√©e:")
    print(f"   P√©riph√©rique: {device.upper()}")
    print(f"   R√©solution marching cubes: {mc_resolution}")
    print(f"   Taille image: {image_size}x{image_size}")
    print(f"   Chunk size: {chunk_size}")

    # V√©rifier les images
    has_reverse_image = reverse_image_path is not None and Path(
        reverse_image_path).exists()
    if has_reverse_image:
        print(f"   Mode: 2 vues avec recto et verso")

    # Nettoyer la m√©moire GPU d√®s le d√©but
    if device == "cuda":
        clear_gpu_memory()

    # Charger et traiter les images
    try:
        image, _ = detect_and_convert_image_format(input_image_path)
        image_resized = image.resize((image_size, image_size))

        reverse_image_resized = None
        if has_reverse_image:
            reverse_image, _ = detect_and_convert_image_format(
                reverse_image_path)
            reverse_image_resized = reverse_image.resize(
                (image_size, image_size))

    except Exception as e:
        print(f"‚ùå Erreur chargement images: {e}")
        return None

    # Charger le mod√®le TripoSR avec param√®tres optimis√©s
    print(f"\nü§ñ Chargement du mod√®le TripoSR (s√©curis√©)...")
    try:
        model = TSR.from_pretrained(
            "stabilityai/TripoSR",
            config_name="config.yaml",
            weight_name="model.ckpt",
        )
        model.renderer.set_chunk_size(chunk_size)
        model.to(device)
        print("‚úÖ Mod√®le charg√© avec succ√®s!")
    except Exception as e:
        print(f"‚ùå Erreur chargement mod√®le: {e}")
        return None

    # Traitement des images avec param√®tres adapt√©s
    print(f"\nüé® Traitement des images...")
    processed_images = []

    try:
        # Traitement image principale
        if remove_bg:
            rembg_session = rembg.new_session()
            processed_main = remove_background(image_resized, rembg_session)
        else:
            processed_main = image_resized

        processed_main = resize_foreground(
            processed_main, 0.85)  # Param√®tre officiel TripoSR

        if processed_main.mode == "RGBA":
            processed_main = np.array(
                processed_main).astype(np.float32) / 255.0
            processed_main = processed_main[:, :, :3] * processed_main[:, :, 3:4] + \
                (1 - processed_main[:, :, 3:4]) * 0.5
            processed_main = Image.fromarray(
                (processed_main * 255.0).astype(np.uint8))

        processed_images.append(processed_main)

        # Traitement image de revers si disponible
        if has_reverse_image:
            if remove_bg:
                reverse_processed = remove_background(
                    reverse_image_resized, rembg_session)
            else:
                reverse_processed = reverse_image_resized
            reverse_processed = resize_foreground(reverse_processed, 0.85)

            if reverse_processed.mode == "RGBA":
                reverse_processed = np.array(
                    reverse_processed).astype(np.float32) / 255.0
                reverse_processed = reverse_processed[:, :, :3] * reverse_processed[:, :, 3:4] + \
                    (1 - reverse_processed[:, :, 3:4]) * 0.5
                reverse_processed = Image.fromarray(
                    (reverse_processed * 255.0).astype(np.uint8))

            processed_images.append(reverse_processed)

    except Exception as e:
        print(
            f"‚ö†Ô∏è  Erreur traitement images: {e}, utilisation images originales")
        processed_images = [image_resized]
        if has_reverse_image:
            processed_images.append(reverse_image_resized)

    # Sauvegarder les images trait√©es
    output_dir = Path(output_dir)
    output_dir.mkdir(parents=True, exist_ok=True)
    image_dir = output_dir / "0"
    image_dir.mkdir(exist_ok=True)

    for i, proc_img in enumerate(processed_images):
        suffix = "" if i == 0 else f"_reverse"
        proc_img.save(image_dir / f"input{suffix}.png")

    # G√©n√©ration du mod√®le 3D avec gestion m√©moire
    print(f"\nüèóÔ∏è  G√©n√©ration du mod√®le 3D S√âCURIS√âE...")
    start_time = time.time()

    try:
        # Nettoyer la m√©moire avant g√©n√©ration
        clear_gpu_memory()

        # G√©n√©ration des codes de sc√®ne
        print("   üìê G√©n√©ration des codes de sc√®ne...")
        with torch.no_grad():
            scene_codes = model([processed_images[0]], device=device)

        # Rendu des vues si demand√© (avec gestion m√©moire)
        if render_video:
            try:
                print("   üé¨ Rendu des vues multiples...")
                render_images = model.render(
                    scene_codes, n_views=30, return_type="pil")
                for ri, render_image in enumerate(render_images[0]):
                    render_image.save(image_dir / f"render_{ri:03d}.png")
                save_video(render_images[0], str(
                    image_dir / "render.mp4"), fps=30)
                print(f"   ‚úÖ Vid√©o sauvegard√©e: {image_dir / 'render.mp4'}")
            except Exception as e:
                print(
                    f"   ‚ö†Ô∏è  Erreur rendu vid√©o: {e}, continuation sans vid√©o")

        # EXTRACTION S√âCURIS√âE DU MAILLAGE avec fallback automatique
        print("   üîß Extraction s√©curis√©e du maillage 3D...")
        clear_gpu_memory()

        meshes = None
        fallback_attempts = [
            (mc_resolution, "r√©solution optimis√©e GPU"),
            (max(256, mc_resolution // 2), "r√©solution r√©duite (s√©curit√© niveau 1)"),
            (256, "r√©solution standard (s√©curit√© niveau 2)"),
            (192, "r√©solution faible (s√©curit√© niveau 3)"),
            (128, "r√©solution tr√®s faible (s√©curit√© niveau 4)"),
            (96, "r√©solution minimale (s√©curit√© niveau 5)")
        ]

        for attempt_resolution, description in fallback_attempts:
            try:
                print(f"   ‚Ä¢ {description}: {attempt_resolution}")
                meshes = model.extract_mesh(
                    scene_codes,
                    has_vertex_color=False,
                    resolution=attempt_resolution,
                    threshold=10.0  # Param√®tre optimis√© pour objets solides
                )
                print(
                    f"   ‚úÖ Extraction r√©ussie avec r√©solution {attempt_resolution}")
                break

            except RuntimeError as e:
                error_str = str(e).lower()
                if "out of memory" in error_str or "numel needs to be smaller" in error_str:
                    error_type = "M√©moire insuffisante" if "out of memory" in error_str else "Limitation tenseur int32"
                    print(
                        f"   ‚ö†Ô∏è  {error_type} pour r√©solution {attempt_resolution}")
                    clear_gpu_memory()
                    if attempt_resolution == 96:
                        print(
                            "   ‚ùå √âchec m√™me avec r√©solution minimale - GPU insuffisant")
                        return None
                    continue
                else:
                    print(f"   ‚ùå Erreur non-ressource: {e}")
                    return None

        if meshes is None:
            print("   ‚ùå Impossible d'extraire le maillage")
            return None

        # Sauvegarder le maillage
        mesh_file = image_dir / "mesh.obj"
        meshes[0].export(str(mesh_file))
        print(f"   ‚úÖ Maillage 3D sauvegard√©: {mesh_file}")

        # Conversion en STL avec PyMeshLab
        print("   üì¶ Conversion optimis√©e en STL...")
        try:
            import pymeshlab as pymesh
            ms = pymesh.MeshSet()
            ms.load_new_mesh(str(mesh_file))

            # Post-processing optimis√© pour pi√®ces numismatiques
            print("   üîß Post-processing sp√©cialis√© pi√®ces...")

            # Nettoyage basique
            try:
                ms.apply_filter('meshing_remove_duplicate_vertices')
                ms.apply_filter('meshing_remove_unreferenced_vertices')
            except:
                try:
                    ms.apply_filter('remove_duplicate_vertices')
                    ms.apply_filter('remove_unreferenced_vertices')
                except:
                    pass

            # Lissage l√©ger avec pr√©servation des d√©tails pour pi√®ces
            try:
                ms.apply_filter('apply_coord_taubin_smoothing',
                                stepsmoothnum=3, lambda1=0.5, mu=-0.53)
            except:
                try:
                    ms.apply_filter('taubin_smooth', stepsmoothnum=3)
                except:
                    pass

            # Statistiques finales
            final_mesh = ms.current_mesh()
            print(
                f"   üìà Maillage final: {final_mesh.vertex_number()} vertices, {final_mesh.face_number()} faces")

            # Sauvegarder STL final
            stl_file = output_dir / f"{Path(input_image_path).stem}.stl"
            ms.save_current_mesh(str(stl_file))

            elapsed_time = time.time() - start_time
            print(f"‚úÖ Fichier STL g√©n√©r√©: {stl_file}")
            print(f"‚è±Ô∏è  Temps total: {elapsed_time:.1f} secondes")

            if has_reverse_image:
                print(f"üéØ Mod√®le cr√©√© avec optimisation 2 vues (recto + verso)")

            return str(stl_file)

        except Exception as e:
            print(f"‚ùå Erreur post-processing: {e}")
            return None

    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration 3D: {e}")
        return None


def diagnostic_info():
    """Affiche les informations de diagnostic pour d√©boguer les probl√®mes"""
    print("üîç Diagnostic du syst√®me")
    print("=" * 50)

    # Versions des librairies principales
    print("üìã Versions des librairies:")
    try:
        import torch
        print(f"   PyTorch: {torch.__version__}")
        print(f"   CUDA disponible: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"   GPU: {torch.cuda.get_device_name(0)}")
            print(f"   Version CUDA: {torch.version.cuda}")
    except ImportError:
        print("   ‚ùå PyTorch non install√©")

    try:
        import pymeshlab
        print(f"   PyMeshLab: {pymeshlab.__version__}")
    except (ImportError, AttributeError):
        print("   ‚ùå PyMeshLab non install√© ou version sans __version__")

    try:
        from PIL import Image
        print(f"   Pillow: {Image.__version__}")
    except (ImportError, AttributeError):
        print("   ‚ùå Pillow non install√©")

    try:
        import numpy as np
        print(f"   NumPy: {np.__version__}")
    except (ImportError, AttributeError):
        print("   ‚ùå NumPy non install√©")

    try:
        import rembg
        print(f"   Rembg: install√©")
    except ImportError:
        print("   ‚ùå Rembg non install√©")

    # Test des filtres PyMeshLab
    print("\nüîß Test des filtres PyMeshLab:")
    try:
        import pymeshlab as ml
        ms = ml.MeshSet()

        # Cr√©er un mesh de test simple (cube)
        try:
            # Essayer de cr√©er un cube pour tester
            ms.create_cube()
            print("   ‚úÖ Cr√©ation de mesh de test r√©ussie")

            # D√©couvrir les filtres disponibles
            available_filters = set()
            try:
                import io
                import contextlib

                f = io.StringIO()
                with contextlib.redirect_stdout(f):
                    ms.print_filter_list()

                filter_output = f.getvalue()
                for line in filter_output.split('\n'):
                    if line.strip() and not line.startswith(' ') and ':' in line:
                        filter_name = line.split(':')[0].strip()
                        if filter_name:
                            available_filters.add(filter_name)

                print(
                    f"   üìä {len(available_filters)} filtres PyMeshLab disponibles")

                # Afficher les filtres les plus importants
                important_filters = [
                    'meshing_remove_duplicate_vertices',
                    'meshing_remove_unreferenced_vertices',
                    'apply_coord_laplacian_smoothing',
                    'meshing_decimation_quadric_edge_collapse',
                    # Anciens noms
                    'remove_duplicate_vertices',
                    'remove_unreferenced_vertices',
                    'laplacian_smooth',
                    'simplification_quadric_edge_collapse_decimation'
                ]

                print("   üéØ Filtres importants disponibles:")
                for filter_name in important_filters:
                    status = "‚úÖ" if filter_name in available_filters else "‚ùå"
                    print(f"      {status} {filter_name}")

                # Test d'application d'un filtre simple
                try:
                    if 'meshing_remove_duplicate_vertices' in available_filters:
                        ms.apply_filter('meshing_remove_duplicate_vertices')
                        print("   ‚úÖ Test de filtre (nouveaux noms) r√©ussi")
                    elif 'remove_duplicate_vertices' in available_filters:
                        ms.apply_filter('remove_duplicate_vertices')
                        print("   ‚úÖ Test de filtre (anciens noms) r√©ussi")
                    else:
                        print("   ‚ö†Ô∏è  Aucun filtre de nettoyage disponible")
                except Exception as e:
                    print(f"   ‚ùå Erreur lors du test de filtre: {e}")

            except Exception as e:
                print(f"   ‚ùå Erreur lors de la d√©couverte des filtres: {e}")

        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation du mesh de test: {e}")

    except ImportError:
        print("   ‚ùå PyMeshLab non disponible pour les tests")

    # Informations sur les formats d'images support√©s
    print("\nüì∏ Formats d'images support√©s:")
    supported_formats = ['PNG', 'WebP', 'JPEG', 'BMP', 'TIFF']
    for fmt in supported_formats:
        try:
            # Test basique d'ouverture
            from PIL import Image
            Image.new('RGB', (10, 10)).save(f'test.{fmt.lower()}', fmt)
            # Supprimer le fichier de test
            Path(f'test.{fmt.lower()}').unlink()
            print(f"   ‚úÖ {fmt}")
        except Exception:
            print(f"   ‚ùå {fmt}")

    # V√©rification de l'espace disque
    print("\nüíæ Espace disque:")
    try:
        import shutil
        total, used, free = shutil.disk_usage('.')
        print(f"   Total: {total // (1024**3)} GB")
        print(f"   Libre: {free // (1024**3)} GB")
        if free < 5 * 1024**3:  # Moins de 5GB
            print("   ‚ö†Ô∏è  Espace disque faible (< 5GB)")
    except Exception as e:
        print(f"   ‚ùå Impossible de v√©rifier l'espace disque: {e}")

    print("\n" + "=" * 50)
    print("üí° Conseils de d√©pannage:")
    print("   1. Si erreurs de filtres PyMeshLab: version r√©cente install√©e")
    print("   2. Si CUDA non disponible: v√©rifiez drivers NVIDIA")
    print("   3. Si m√©moire insuffisante: fermez autres applications")
    print("   4. Si formats non support√©s: r√©installez Pillow")


def print_coin_tips():
    """Affiche des conseils pour optimiser la conversion de pi√®ces numismatiques"""
    print("\nüí° CONSEILS POUR PI√àCES NUMISMATIQUES:")
    print("=" * 50)
    print("ü™ô QUALIT√â OPTIMALE:")
    print("   ‚Ä¢ Utilisez des images haute r√©solution (minimum 1000x1000 pixels)")
    print("   ‚Ä¢ √âclairage uniforme sans ombres port√©es")
    print("   ‚Ä¢ Fond contrast√© (blanc ou noir uni)")
    print("   ‚Ä¢ Pi√®ce bien centr√©e dans l'image")
    print("   ‚Ä¢ Ajoutez une image de revers avec --reverse-image pour de meilleurs r√©sultats")
    print("")
    print("‚öôÔ∏è  PARAM√àTRES RECOMMAND√âS:")
    print("   ‚Ä¢ R√©solution standard: --mc-resolution 640 (d√©faut optimis√©)")
    print("   ‚Ä¢ Haute qualit√©: --mc-resolution 800 ou 1024")
    print("   ‚Ä¢ Si artefacts: ajuster --mc-threshold (0.1-0.2)")
    print("   ‚Ä¢ Images tr√®s d√©taill√©es: --foreground-ratio 0.7")
    print("")
    print("üöÄ EXEMPLES DE COMMANDES:")
    print("   ‚Ä¢ Standard: python png-to-stl-local.py ma_piece.png")
    print("   ‚Ä¢ Avec revers: python png-to-stl-local.py recto.png --reverse-image verso.png")
    print("   ‚Ä¢ Tr√®s haute qualit√©: python png-to-stl-local.py piece.png --mc-resolution 1024")
    print("   ‚Ä¢ Supprimer fond: python png-to-stl-local.py piece.jpg --remove-bg")
    print("")


def get_optimal_settings_for_gpu():
    """
    D√©termine les param√®tres optimaux selon la m√©moire GPU disponible
    Retourne des param√®tres adapt√©s au hardware pour √©viter les erreurs OOM
    """
    if not torch.cuda.is_available():
        return {
            'mc_resolution': 256,
            'image_size': 512,
            'chunk_size': 4096,
            'device_info': 'CPU seulement - param√®tres conservateurs'
        }

    try:
        # Obtenir les informations GPU
        gpu_memory_gb = torch.cuda.get_device_properties(
            0).total_memory / (1024**3)
        gpu_name = torch.cuda.get_device_name(0)

        print(
            f"   üîç D√©tection automatique: {gpu_name} ({gpu_memory_gb:.1f} GB)")

        # Param√®tres adapt√©s selon la m√©moire GPU disponible (bas√©s sur TripoSR officiel)
        if gpu_memory_gb >= 24:  # RTX 4090, A6000, etc.
            return {
                'mc_resolution': 320,  # Maximum recommand√© dans Gradio
                'image_size': 512,     # Taille standard TripoSR
                'chunk_size': 8192,    # Valeur officielle TripoSR
                'device_info': f'GPU haut de gamme ({gpu_memory_gb:.1f}GB) - qualit√© maximale'
            }
        elif gpu_memory_gb >= 16:  # RTX 4080, 3090, etc.
            return {
                'mc_resolution': 320,
                'image_size': 512,
                'chunk_size': 8192,
                'device_info': f'GPU performant ({gpu_memory_gb:.1f}GB) - haute qualit√©'
            }
        elif gpu_memory_gb >= 10:  # RTX 3080, 4070, etc.
            return {
                'mc_resolution': 256,  # Valeur par d√©faut TripoSR
                'image_size': 512,
                'chunk_size': 8192,
                'device_info': f'GPU moyen-haut ({gpu_memory_gb:.1f}GB) - param√®tres standards TripoSR'
            }
        elif gpu_memory_gb >= 6:   # RTX 2070 SUPER, 3060, etc.
            return {
                'mc_resolution': 256,
                'image_size': 512,
                'chunk_size': 8192,
                'device_info': f'GPU milieu de gamme ({gpu_memory_gb:.1f}GB) - param√®tres TripoSR avec s√©curit√©'
            }
        else:  # RTX 2060, GTX 1660, etc.
            return {
                'mc_resolution': 192,  # Plus conservateur pour GPU faibles
                'image_size': 512,
                'chunk_size': 4096,
                'device_info': f'GPU entr√©e de gamme ({gpu_memory_gb:.1f}GB) - qualit√© r√©duite'
            }

    except Exception as e:
        print(f"   ‚ö†Ô∏è  Erreur d√©tection GPU: {e}")
        return {
            'mc_resolution': 384,
            'image_size': 512,
            'chunk_size': 4096,
            'device_info': 'D√©tection √©chou√©e - param√®tres s√©curis√©s'
        }


def clear_gpu_memory():
    """Nettoie la m√©moire GPU pour optimiser l'utilisation"""
    if torch.cuda.is_available():
        torch.cuda.empty_cache()
        torch.cuda.synchronize()


if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Module de diagnostic pour le convertisseur STL
G√®re les tests, analyses et informations syst√®me
"""

import os
import sys
import shutil
import torch
import numpy as np
from pathlib import Path
from PIL import Image
import contextlib
import io


def check_cuda_compatibility():
    """V√©rifie la compatibilit√© CUDA et affiche les informations GPU"""
    if not torch.cuda.is_available():
        print("‚ö†Ô∏è  CUDA non disponible. Le traitement sera effectu√© sur CPU (beaucoup plus lent).")
        print("   Pour utiliser le GPU, assurez-vous que:")
        print("   1. CUDA Toolkit 11.8+ est install√©")
        print("   2. Les drivers NVIDIA sont √† jour")
        print("   3. PyTorch avec support CUDA est install√©")
        return False

    print(f"‚úÖ CUDA disponible!")
    print(f"   GPU: {torch.cuda.get_device_name(0)}")
    print(
        f"   M√©moire GPU: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
    print(f"   Version CUDA: {torch.version.cuda}")

    # V√©rifier la m√©moire disponible
    torch.cuda.empty_cache()
    memory_free = torch.cuda.get_device_properties(
        0).total_memory - torch.cuda.memory_allocated(0)
    memory_free_gb = memory_free / 1024**3

    if memory_free_gb < 4:
        print(f"‚ö†Ô∏è  M√©moire GPU faible: {memory_free_gb:.1f} GB disponible")
        print("   Fermez les autres applications utilisant le GPU pour de meilleures performances.")

    return True


def diagnostic_info():
    """Affiche les informations de diagnostic pour d√©boguer les probl√®mes"""
    print("üîç Diagnostic du syst√®me")
    print("=" * 50)

    # Versions des librairies principales
    print("üìã Versions des librairies:")
    try:
        import torch
        print(f"   PyTorch: {torch.__version__}")
        print(f"   CUDA disponible: {torch.cuda.is_available()}")
        if torch.cuda.is_available():
            print(f"   GPU: {torch.cuda.get_device_name(0)}")
            print(f"   Version CUDA: {torch.version.cuda}")
    except ImportError:
        print("   ‚ùå PyTorch non install√©")

    try:
        import pymeshlab
        print(f"   PyMeshLab: {pymeshlab.__version__}")
    except (ImportError, AttributeError):
        print("   ‚ùå PyMeshLab non install√© ou version sans __version__")

    try:
        from PIL import Image
        print(f"   Pillow: {Image.__version__}")
    except (ImportError, AttributeError):
        print("   ‚ùå Pillow non install√©")

    try:
        import numpy as np
        print(f"   NumPy: {np.__version__}")
    except (ImportError, AttributeError):
        print("   ‚ùå NumPy non install√©")

    try:
        import rembg
        print(f"   Rembg: install√©")
    except ImportError:
        print("   ‚ùå Rembg non install√©")

    # Test des filtres PyMeshLab
    print("\nüîß Test des filtres PyMeshLab:")
    try:
        import pymeshlab as ml
        ms = ml.MeshSet()

        # Cr√©er un mesh de test simple (cube)
        try:
            # Essayer de cr√©er un cube pour tester
            ms.create_cube()
            print("   ‚úÖ Cr√©ation de mesh de test r√©ussie")

            # D√©couvrir les filtres disponibles
            available_filters = set()
            try:
                f = io.StringIO()
                with contextlib.redirect_stdout(f):
                    ms.print_filter_list()

                filter_output = f.getvalue()
                for line in filter_output.split('\n'):
                    if line.strip() and not line.startswith(' ') and ':' in line:
                        filter_name = line.split(':')[0].strip()
                        if filter_name:
                            available_filters.add(filter_name)

                print(
                    f"   üìä {len(available_filters)} filtres PyMeshLab disponibles")

                # Afficher les filtres les plus importants
                important_filters = [
                    'meshing_remove_duplicate_vertices',
                    'meshing_remove_unreferenced_vertices',
                    'apply_coord_laplacian_smoothing',
                    'meshing_decimation_quadric_edge_collapse',
                    # Anciens noms
                    'remove_duplicate_vertices',
                    'remove_unreferenced_vertices',
                    'laplacian_smooth',
                    'simplification_quadric_edge_collapse_decimation'
                ]

                print("   üéØ Filtres importants disponibles:")
                for filter_name in important_filters:
                    status = "‚úÖ" if filter_name in available_filters else "‚ùå"
                    print(f"      {status} {filter_name}")

                # Test d'application d'un filtre simple
                try:
                    if 'meshing_remove_duplicate_vertices' in available_filters:
                        ms.apply_filter('meshing_remove_duplicate_vertices')
                        print("   ‚úÖ Test de filtre (nouveaux noms) r√©ussi")
                    elif 'remove_duplicate_vertices' in available_filters:
                        ms.apply_filter('remove_duplicate_vertices')
                        print("   ‚úÖ Test de filtre (anciens noms) r√©ussi")
                    else:
                        print("   ‚ö†Ô∏è  Aucun filtre de nettoyage disponible")
                except Exception as e:
                    print(f"   ‚ùå Erreur lors du test de filtre: {e}")

            except Exception as e:
                print(f"   ‚ùå Erreur lors de la d√©couverte des filtres: {e}")

        except Exception as e:
            print(f"   ‚ùå Erreur lors de la cr√©ation du mesh de test: {e}")

    except ImportError:
        print("   ‚ùå PyMeshLab non disponible pour les tests")

    # Informations sur les formats d'images support√©s
    print("\nüì∏ Formats d'images support√©s:")
    supported_formats = ['PNG', 'WebP', 'JPEG', 'BMP', 'TIFF']
    for fmt in supported_formats:
        try:
            # Test basique d'ouverture
            from PIL import Image
            Image.new('RGB', (10, 10)).save(f'test.{fmt.lower()}', fmt)
            # Supprimer le fichier de test
            Path(f'test.{fmt.lower()}').unlink()
            print(f"   ‚úÖ {fmt}")
        except Exception:
            print(f"   ‚ùå {fmt}")

    # V√©rification de l'espace disque
    print("\nüíæ Espace disque:")
    try:
        total, used, free = shutil.disk_usage('.')
        print(f"   Total: {total // (1024**3)} GB")
        print(f"   Libre: {free // (1024**3)} GB")
        if free < 5 * 1024**3:  # Moins de 5GB
            print("   ‚ö†Ô∏è  Espace disque faible (< 5GB)")
    except Exception as e:
        print(f"   ‚ùå Impossible de v√©rifier l'espace disque: {e}")

    print("\n" + "=" * 50)
    print("üí° Conseils de d√©pannage:")
    print("   1. Si erreurs de filtres PyMeshLab: version r√©cente install√©e")
    print("   2. Si CUDA non disponible: v√©rifiez drivers NVIDIA")
    print("   3. Si m√©moire insuffisante: fermez autres applications")
    print("   4. Si formats non support√©s: r√©installez Pillow")


def analyze_render_quality(render_dir):
    """
    Analyse la qualit√© des rendus et sugg√®re des am√©liorations
    """
    render_dir = Path(render_dir)

    if not render_dir.exists():
        print("‚ùå Dossier de rendu introuvable")
        return

    render_files = list(render_dir.glob("render_*.png"))
    if not render_files:
        print("‚ùå Aucun fichier de rendu trouv√©")
        return

    print(f"\nüîç Analyse de qualit√© des rendus:")
    print(f"   üìÅ Dossier: {render_dir}")
    print(f"   üñºÔ∏è  Nombre de vues: {len(render_files)}")

    # Analyser quelques images pour d√©tecter des probl√®mes
    sample_files = render_files[:5]  # Analyser les 5 premiers

    for i, render_file in enumerate(sample_files):
        try:
            from PIL import Image
            img = Image.open(render_file)
            width, height = img.size

            # Convertir en array numpy pour analyse
            img_array = np.array(img)

            # D√©tecter les zones noires (possibles artefacts)
            if len(img_array.shape) == 3:
                # Image couleur
                # Pixels tr√®s sombres
                dark_pixels = np.sum(img_array, axis=2) < 30
                dark_ratio = np.sum(dark_pixels) / (width * height)

                if dark_ratio > 0.3:  # Plus de 30% de pixels sombres
                    print(
                        f"   ‚ö†Ô∏è  Vue {i:03d}: Beaucoup de zones sombres ({dark_ratio:.1%})")

            print(f"   ‚úÖ Vue {i:03d}: {width}x{height} - OK")

        except Exception as e:
            print(f"   ‚ùå Vue {i:03d}: Erreur d'analyse - {e}")

    # Suggestions d'am√©lioration
    print(f"\nüí° Suggestions d'am√©lioration:")
    print(f"   ‚Ä¢ Augmenter la r√©solution: --render-resolution 1024")
    print(f"   ‚Ä¢ Ajuster l'angle: --render-elevation 15 (vue l√©g√®rement en plong√©e)")
    print(f"   ‚Ä¢ Modifier la distance: --render-distance 2.2 (plus loin)")
    print(f"   ‚Ä¢ Changer le champ de vision: --render-fov 35 (plus serr√©)")
    print(f"   ‚Ä¢ Plus de vues: --render-views 60 (rotation plus fluide)")


def test_triposr_installation():
    """
    Test l'installation de TripoSR et ses d√©pendances

    Returns:
        bool: True si tout fonctionne correctement
    """
    print("\nüß™ Test de l'installation TripoSR:")

    try:
        # Test d'importation des modules TripoSR
        from tsr.system import TSR
        from tsr.utils import remove_background, resize_foreground
        print("   ‚úÖ Modules TripoSR import√©s avec succ√®s")

        # Test de chargement du mod√®le (sans t√©l√©chargement)
        try:
            # V√©rifier si le mod√®le est disponible localement
            import huggingface_hub
            try:
                model_info = huggingface_hub.model_info("stabilityai/TripoSR")
                print("   ‚úÖ Mod√®le TripoSR accessible sur HuggingFace")
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Mod√®le non accessible: {e}")

        except ImportError:
            print("   ‚ùå huggingface_hub non install√©")

        return True

    except ImportError as e:
        print(f"   ‚ùå Erreur d'importation TripoSR: {e}")
        return False


def analyze_system_performance():
    """
    Analyse les performances du syst√®me pour l'optimisation

    Returns:
        dict: Informations sur les performances
    """
    performance_info = {
        'cpu_count': os.cpu_count(),
        'available_memory': None,
        'gpu_available': torch.cuda.is_available(),
        'gpu_memory': None,
        'disk_space': None,
        'recommendations': []
    }

    # M√©moire syst√®me
    try:
        import psutil
        memory = psutil.virtual_memory()
        performance_info['available_memory'] = memory.available / \
            (1024**3)  # GB

        if memory.available < 8 * 1024**3:  # Moins de 8GB
            performance_info['recommendations'].append(
                "M√©moire syst√®me faible (< 8GB), consid√©rez fermer d'autres applications")
    except ImportError:
        performance_info['recommendations'].append(
            "Installez psutil pour le monitoring m√©moire")

    # M√©moire GPU
    if torch.cuda.is_available():
        gpu_memory = torch.cuda.get_device_properties(
            0).total_memory / (1024**3)
        performance_info['gpu_memory'] = gpu_memory

        if gpu_memory < 6:
            performance_info['recommendations'].append(
                "M√©moire GPU faible (< 6GB), utilisez des r√©solutions plus faibles")

    # Espace disque
    try:
        total, used, free = shutil.disk_usage('.')
        performance_info['disk_space'] = free / (1024**3)  # GB

        if free < 10 * 1024**3:  # Moins de 10GB
            performance_info['recommendations'].append(
                "Espace disque faible (< 10GB), nettoyez le disque")
    except Exception:
        pass

    return performance_info


def validate_dependencies():
    """
    Valide que toutes les d√©pendances critiques sont install√©es

    Returns:
        dict: Statut des d√©pendances
    """
    dependencies = {
        'torch': False,
        'torchvision': False,
        'PIL': False,
        'numpy': False,
        'pymeshlab': False,
        'rembg': False,
        'transformers': False,
        'diffusers': False,
        'opencv-python': False,
        'triposr': False
    }

    # Test des importations
    modules_to_test = [
        ('torch', 'torch'),
        ('torchvision', 'torchvision'),
        ('PIL', 'PIL'),
        ('numpy', 'numpy'),
        ('pymeshlab', 'pymeshlab'),
        ('rembg', 'rembg'),
        ('transformers', 'transformers'),
        ('diffusers', 'diffusers'),
        ('opencv-python', 'cv2'),
        ('triposr', 'tsr.system')
    ]

    for dep_name, module_name in modules_to_test:
        try:
            __import__(module_name)
            dependencies[dep_name] = True
        except ImportError:
            dependencies[dep_name] = False

    return dependencies


def print_system_report():
    """
    Affiche un rapport complet du syst√®me
    """
    print("üìä Rapport syst√®me complet")
    print("=" * 60)

    # Diagnostic de base
    diagnostic_info()

    # Test TripoSR
    test_triposr_installation()

    # Analyse des performances
    print("\n‚ö° Analyse des performances:")
    perf_info = analyze_system_performance()

    print(f"   CPU: {perf_info['cpu_count']} c≈ìurs")
    if perf_info['available_memory']:
        print(f"   M√©moire disponible: {perf_info['available_memory']:.1f} GB")
    if perf_info['gpu_memory']:
        print(f"   M√©moire GPU: {perf_info['gpu_memory']:.1f} GB")
    if perf_info['disk_space']:
        print(f"   Espace disque: {perf_info['disk_space']:.1f} GB")

    # Recommandations
    if perf_info['recommendations']:
        print("\nüí° Recommandations:")
        for rec in perf_info['recommendations']:
            print(f"   ‚Ä¢ {rec}")

    # Validation des d√©pendances
    print("\nüì¶ Statut des d√©pendances:")
    deps = validate_dependencies()

    for dep, status in deps.items():
        status_icon = "‚úÖ" if status else "‚ùå"
        print(f"   {status_icon} {dep}")

    # R√©sum√©
    total_deps = len(deps)
    working_deps = sum(deps.values())
    print(
        f"\nüìà R√©sum√©: {working_deps}/{total_deps} d√©pendances fonctionnelles")

    if working_deps == total_deps:
        print("üéâ Syst√®me pr√™t pour la conversion STL!")
    else:
        print("‚ö†Ô∏è  Certaines d√©pendances manquent, utilisez install.py pour les installer")


def benchmark_conversion_time(test_image_path=None, iterations=3):
    """
    Benchmark les temps de conversion pour optimiser les performances

    Args:
        test_image_path: Chemin vers une image de test (optionnel)
        iterations: Nombre d'it√©rations pour la moyenne

    Returns:
        dict: R√©sultats du benchmark
    """
    if not test_image_path:
        # Cr√©er une image de test simple
        test_image_path = "test_benchmark.png"
        test_image = Image.new('RGB', (512, 512), color='red')
        test_image.save(test_image_path)
        cleanup_test_image = True
    else:
        cleanup_test_image = False

    print(f"\n‚è±Ô∏è  Benchmark de conversion ({iterations} it√©rations):")

    try:
        from .converter import convert_coin_to_stl_safe
        import time

        times = []

        for i in range(iterations):
            print(f"   It√©ration {i+1}/{iterations}...")
            start_time = time.time()

            # Test de conversion
            result = convert_coin_to_stl_safe(
                test_image_path,
                output_dir=f"benchmark_output_{i}",
                render_video=False  # D√©sactiver la vid√©o pour le benchmark
            )

            end_time = time.time()
            elapsed = end_time - start_time
            times.append(elapsed)

            # Nettoyer le dossier de sortie
            import shutil
            try:
                shutil.rmtree(f"benchmark_output_{i}")
            except:
                pass

        # Nettoyer l'image de test si cr√©√©e
        if cleanup_test_image:
            Path(test_image_path).unlink()

        # Calculer les statistiques
        avg_time = sum(times) / len(times)
        min_time = min(times)
        max_time = max(times)

        benchmark_results = {
            'average_time': avg_time,
            'min_time': min_time,
            'max_time': max_time,
            'iterations': iterations,
            'device': 'cuda' if torch.cuda.is_available() else 'cpu'
        }

        print(f"   Temps moyen: {avg_time:.1f}s")
        print(f"   Temps minimum: {min_time:.1f}s")
        print(f"   Temps maximum: {max_time:.1f}s")
        print(f"   P√©riph√©rique: {benchmark_results['device'].upper()}")

        return benchmark_results

    except Exception as e:
        print(f"   ‚ùå Erreur durante le benchmark: {e}")
        return {}
